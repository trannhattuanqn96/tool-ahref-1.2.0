# H∆∞·ªõng d·∫´n v·ªÅ event "user-open-tool"

## V·ªã tr√≠ s·ª≠ d·ª•ng:

### 1. Trong main.js (d√≤ng 1784):
- **Handler**: `ipcMain.handle("open-login-and-get-page", ...)`
- **M·ª•c ƒë√≠ch**: ƒê∆∞·ª£c g·ªçi khi user m·ªü tool t·ª´ dashboard UI
- **Lu·ªìng ho·∫°t ƒë·ªông**:
  1. Nh·∫≠n request t·ª´ renderer process v·ªõi `{ tool, token }`
  2. Validate device th√¥ng qua API
  3. Check credit qua ToolManager.checkCredit()
  4. Emit event `user-open-tool` ƒë·∫øn backend socket server
  5. Return k·∫øt qu·∫£ v·ªÅ renderer

### 2. C√°ch g·ªçi t·ª´ Frontend:
- **File**: renderer.js (d√≤ng 1412)
- **API**: `window.electronAPI.openTool(code, currentToken)`
- **Mapping**: preload.js map `openTool` -> `open-login-and-get-page` IPC handler

### 3. Socket Event Flow:
```
Renderer -> Preload -> Main (IPC) -> Backend Socket Server
    |                                       |
    v                                       v
openTool()                         backendSocket.emit("user-open-tool")
```

### 4. Backend Socket Listeners:
- Server s·∫Ω nh·∫≠n event "user-open-tool" v·ªõi payload `{ token, tool }`
- Server x·ª≠ l√Ω logic m·ªü tool, t·∫°o session, validate credit
- Server response l·∫°i th√¥ng qua c√°c event kh√°c nh∆∞:
  - "open-tool-tab" (d√≤ng 2048 trong main.js)
  - "tool-open-fail" (d√≤ng 3665)
  - "tool-expired" (d√≤ng 3626)

### 5. T√≥m t·∫Øt:
**user-open-tool** l√† event socket ƒë∆∞·ª£c emit t·ª´ main process ƒë·∫øn backend server khi user click m·ªü tool t·ª´ dashboard. ƒê√¢y l√† ph·∫ßn c·ªßa legacy logic ƒë·ªÉ duy tr√¨ backward compatibility trong h·ªá th·ªëng hybrid m·ªõi.

## 6. BYPASS Multi Device Support

### A. ‚úÖ ƒêANG ACTIVE: Bypass event `tool-open-fail` (d√≤ng 3667):
- **M·ª•c ƒë√≠ch**: B·ªè qua ho√†n to√†n event t·ª´ server khi tool b·ªã reject
- **Logic**: `return;` ngay ƒë·∫ßu listener ƒë·ªÉ ignore ho√†n to√†n
- **K·∫øt qu·∫£**: Kh√¥ng hi·ªÉn th·ªã dialog error, kh√¥ng th√¥ng b√°o g√¨ c·∫£

### B. ‚úÖ ƒêANG ACTIVE: Bypass ki·ªÉm tra tool ƒë√£ m·ªü (d√≤ng 2065):
- **M·ª•c ƒë√≠ch**: Cho ph√©p m·ªü c√πng tool tr√™n nhi·ªÅu device c√πng l√∫c  
- **Logic**: Comment out ho√†n to√†n ƒëo·∫°n code ki·ªÉm tra `activeWindows.length > 0`
- **K·∫øt qu·∫£**: Tool c√≥ th·ªÉ m·ªü ƒë·ªìng th·ªùi tr√™n nhi·ªÅu device m√† kh√¥ng b·ªã ch·∫∑n

### C. üîß OPTION: Bypass ho√†n to√†n server (d√≤ng 1785):
- **M·ª•c ƒë√≠ch**: M·ªü tool tr·ª±c ti·∫øp m√† kh√¥ng g·ª≠i request ƒë·∫øn server
- **C√°ch k√≠ch ho·∫°t**: Uncomment d√≤ng `return await directOpenToolBypass(tool, token);`
- **K·∫øt qu·∫£**: Tool m·ªü ngay l·∫≠p t·ª©c, kh√¥ng c·∫ßn ch·ªù server response

### D. Code Changes Summary:
```javascript
// 1. ‚úÖ ACTIVE: Bypass tool-open-fail event ho√†n to√†n
backendSocket.on("tool-open-fail", (data) => {
    console.log("[BYPASS] tool-open-fail event ignored for multi device support:", data);
    return; // B·ªè qua ho√†n to√†n
});

// 2. ‚úÖ ACTIVE: Bypass duplicate tool check 
// if (activeWindows.length > 0) { ... } // ‚Üê ƒê√£ b·ªã comment out

// 3. üîß OPTION: Direct tool opening bypass
// return await directOpenToolBypass(tool, token); // ‚Üê Uncomment ƒë·ªÉ k√≠ch ho·∫°t
```

### E. Recommendation:
- **Current setup (A + B)**: ƒê·ªß cho multi device, v·∫´n c√≥ server validation
- **Full bypass (A + B + C)**: Ho√†n to√†n ƒë·ªôc l·∫≠p server, m·ªü tool instant

---

## 1. Check source
npm install -g asar

asar extract app.asar thu_muc_dich

app.asar l√† t√™n file .asar c·ªßa b·∫°n.
thu_muc_dich l√† t√™n th∆∞ m·ª•c b·∫°n mu·ªën gi·∫£i n√©n ra (c√≥ th·ªÉ ƒë·∫∑t t√πy √Ω).
Sau khi gi·∫£i n√©n, to√†n b·ªô m√£ ngu·ªìn s·∫Ω n·∫±m trong th∆∞ m·ª•c thu_muc_dich. B·∫°n c√≥ th·ªÉ xem, ch·ªânh s·ª≠a c√°c file JavaScript, HTML, CSS b√™n trong.

2. Code
// ========================== open dev tool ============================
	// cheat open f12
	// win.webContents.openDevTools();

    const win = new BrowserWindow({
			width: 1300,
			height: 800,
			webPreferences: {
				preload: path.join(__dirname, "preload.js"),
				contextIsolation: true,
				nodeIntegration: false,
				sandbox: false,
				partition: partitionName,
				nativeWindowOpen: true,
				webSecurity: true, // Enable web security
				allowRunningInsecureContent: false, // Don't allow mixed content (HTTP on HTTPS)
				experimentalFeatures: false, // Disable experimental features
				backgroundThrottling: false, // Don't throttle background tabs
				spellcheck: false, // Disable spellcheck for performance
				defaultEncoding: "UTF-8", // Set default encoding
				devTools: true, // Disable DevTools completely
			},
		});

3. cheat open tool ahref open nhi·ªÅu 
const partitionName = await getLatestPartitionFromBackend(
			data.tool_type,
			data.id
		);
		
 	//win.webContents.closeDevTools()
// =======================================================================

// ========================== debug ============================

{
	// Use IntelliSense to learn about possible attributes.
	// Hover to view descriptions of existing attributes.
	// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Debug Electron Main Process",
			"type": "node",
			"request": "launch",
			"cwd": "${workspaceFolder}/code/resources",
			"program": "${workspaceFolder}/code/resources/main.js",
			"runtimeExecutable": "${workspaceFolder}/code/resources/node_modules/.bin/electron",
			"windows": {
				"runtimeExecutable": "${workspaceFolder}/code/resources/node_modules/.bin/electron.cmd"
			},
			"runtimeArgs": ["--inspect=9229", "--remote-debugging-port=9222"],
			"args": ["."],
			"outputCapture": "std",
			"console": "integratedTerminal",
			"skipFiles": ["<node_internals>/**"],
			"env": {
				"NODE_ENV": "development",
				"ELECTRON_IS_DEV": "1"
			}
		},
		{
			"name": "Debug Electron Renderer Process",
			"type": "chrome",
			"request": "attach",
			"port": 9222,
			"webRoot": "${workspaceFolder}/code/resources",
			"timeout": 30000
		}
	],
	"compounds": [
		{
			"name": "Debug All (Electron Main + Renderer)",
			"configurations": [
				"Debug Electron Main Process",
				"Debug Electron Renderer Process"
			]
		}
	]
}


// =======================================================================
cleanupDestroyedWindows()


// ================================= multi device ==========================================
async getDeviceInfoForServer() {
		// const deviceInfo = await this.getDeviceInfo();
		console.log("deviceInfodeviceInfo", deviceInfo);

		const deviceInfo = {
			hostname: "DESKTOP-IC9ECU1",
			username: "admin",
			platform: "win32",
			arch: "x64",
			release: "10.0.19045",
			machineId:
				"6a503591c76cf8469cf9a2e835a60a5e6086a02e2ad36163da3f3b0cdee20584",
			totalMemory: 34179096576,
			cpuModel: "13th Gen Intel(R) Core(TM) i5-13400F",
			cpuCores: 16,
			timezone: "Asia/Bangkok",
			timezoneOffset: -420,
			networkInfo:
				"00:15:5d:70:18:5f|00:15:5d:70:18:5f|00:15:5d:98:d8:60|00:15:5d:98:d8:60|9c:6b:00:68:d5:e4|9c:6b:00:68:d5:e4",
			createdAt: 9755600121058,
		};

		return {
			// CH·ªà g·ª≠i raw data - KH√îNG t√≠nh fingerprint ·ªü client
			hostname: deviceInfo.hostname,
			username: deviceInfo.username,
			platform: deviceInfo.platform,
			arch: deviceInfo.arch,
			machineId: deviceInfo.machineId,
			cpuCores: deviceInfo.cpuCores,
			totalMemory: Math.floor(
				deviceInfo.totalMemory / 1024 / 1024 / 1024
			), // GB rounded
			timezone: deviceInfo.timezone,
			networkMacs: this.getNetworkMacs(), // Ch·ªâ MAC addresses
			timestamp: Date.now(),
		};
	}
// ===========================================================================


tab ahref
window.location.hostname.includes('ahrefs')
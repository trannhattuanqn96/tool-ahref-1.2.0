// renderer.js - MuaTool Dashboard UI
// Ch·ªâ gi·ªØ l·∫°i ph·∫ßn UI dashboard, socket, v√† giao ti·∫øp v·ªõi main.js qua electronAPI
// Kh√¥ng backup cookies/storage/proxy v√†o localStorage, kh√¥ng t·ª± √Ω thao t√°c tool/account

// Global error handlers
window.addEventListener('error', (event) => {
  console.error('[GLOBAL ERROR]', event.error);
  // S·∫Ω hi·ªÉn th·ªã th√¥ng b√°o sau khi createFloatingMessage ƒë∆∞·ª£c define
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('[UNHANDLED REJECTION]', event.reason);
  // NgƒÉn hi·ªÉn th·ªã l·ªói m·∫∑c ƒë·ªãnh
  event.preventDefault();
});

// K·∫øt n·ªëi socket ƒë·ªÉ nh·∫≠n real-time updates
const socket = io('https://app.muatool.com', {
  reconnection: true,
  transports: ['websocket', 'polling'],
  reconnectionDelay: 1000,
  reconnectionAttempts: 10,
  timeout: 20000
});

// Initialize Socket Optimizer for performance monitoring
let socketOptimizer = null;

// L·∫•y c√°c ph·∫ßn t·ª≠ UI
const loginBtn = document.getElementById('btnLogin');
const tokenInput = document.getElementById('token');
// const messageBox = document.getElementById('message'); // L·∫•y khi c·∫ßn trong showMessage()
const infoBar = document.getElementById('infoBar');
const emailSpan = document.getElementById('userEmail');
const tokenSpan = document.getElementById('tokenInfo');
const userBalanceSpan = document.getElementById('userBalance');
const rechargeBtn = document.getElementById('rechargeBtn');
const transactionHistoryBtn = document.getElementById('transactionHistoryBtn');
const creditAmount = document.getElementById('creditAmount');
const logoutBtn = document.getElementById('logout');
const reloadBtn = document.getElementById('reloadDashboard');
const toolsGrid = document.getElementById('tools');
const loginForm = document.getElementById('loginForm');

let currentToken = null;
let toolsData = [];
let userBalance = 0;

// === AUTO LOGIN RETRY MANAGER ===
const AutoLoginRetry = {
  active: false,
  attempts: 0,
  timer: null,
  maxDelayMs: 30000,
  baseDelayMs: 2000,
  start(token, reason = 'server_unavailable') {
    if (!token) return;
    if (this.active && currentToken !== token) this.stop();
    this.active = true;
    currentToken = token;
    this.scheduleNext(token, reason);
  },
  scheduleNext(token, reason) {
    const delay = Math.min(this.baseDelayMs * Math.pow(2, this.attempts), this.maxDelayMs);
    this.attempts += 1;
    createFloatingMessage(`üõ†Ô∏è Server ƒëang kh·ªüi ƒë·ªông (attempt ${this.attempts}). T·ª± th·ª≠ l·∫°i sau ${Math.round(delay/1000)}s...`, 'warning', 3500);
    clearTimeout(this.timer);
    this.timer = setTimeout(() => autoLoginWithToken(token, true), delay);
  },
  stop() {
    this.active = false;
    this.attempts = 0;
    clearTimeout(this.timer);
    this.timer = null;
  }
};

function isTransientError(errMsg, code) {
  const msg = (errMsg || '').toString().toLowerCase();
  const transientCodes = ['NETWORK_ERROR', 'SERVER_ERROR', 'TIMEOUT_ERROR', 'SYSTEM_ERROR'];
  if (code && transientCodes.includes(code)) return true;
  return [
    'timeout', 'network', 'fetch', 'failed to fetch', 'econn', 'refused', 'unreachable',
    'certificate', 'dns', 'enotfound', 'socket', 'disconnect'
  ].some(k => msg.includes(k));
}

// === ERROR CODE MAPPING SYSTEM ===
const ERROR_CODES = {
  // Authentication errors
  'TOKEN_BLOCKED': {
    icon: 'üîí',
    message: 'Token b·ªã kh√≥a do vi ph·∫°m b·∫£o m·∫≠t',
    duration: 10000,
    severity: 'error'
  },
  'TOKEN_EXPIRED': {
    icon: '‚è∞',
    message: 'Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i',
    duration: 8000,
    severity: 'warning'
  },
  'TOKEN_INVALID': {
    icon: '‚ùå',
    message: 'Token kh√¥ng h·ª£p l·ªá',
    duration: 5000,
    severity: 'error'
  },
  
  // Device errors
  'DEVICE_CONFLICT': {
    icon: 'üö´',
    message: 'Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n m√°y t√≠nh kh√°c!\nToken b·ªã kh√≥a trong 5 ph√∫t ƒë·ªÉ b·∫£o m·∫≠t.',
    duration: 15000,
    severity: 'error'
  },
  'DEVICE_ERROR': {
    icon: 'üì±',
    message: 'L·ªói x√°c th·ª±c thi·∫øt b·ªã',
    duration: 8000,
    severity: 'error'
  },
  'DEVICE_LIMIT': {
    icon: 'üî¢',
    message: 'ƒê√£ v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng thi·∫øt b·ªã cho ph√©p',
    duration: 10000,
    severity: 'warning'
  },
  
  // Credit errors
  'INSUFFICIENT_CREDIT': {
    icon: 'üí∞',
    message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ s·ª≠ d·ª•ng tool n√†y',
    duration: 8000,
    severity: 'warning'
  },
  'CREDIT_ERROR': {
    icon: 'üí≥',
    message: 'L·ªói ki·ªÉm tra s·ªë d∆∞',
    duration: 5000,
    severity: 'error'
  },
  
  // Tool errors
  'TOOL_NOT_FOUND': {
    icon: 'üîç',
    message: 'Tool kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã g·ª° b·ªè',
    duration: 5000,
    severity: 'error'
  },
  'TOOL_DISABLED': {
    icon: 'üö´',
    message: 'Tool t·∫°m th·ªùi b·ªã v√¥ hi·ªáu h√≥a',
    duration: 8000,
    severity: 'warning'
  },
  'TOOL_MAINTENANCE': {
    icon: 'üîß',
    message: 'Tool ƒëang b·∫£o tr√¨, vui l√≤ng th·ª≠ l·∫°i sau',
    duration: 10000,
    severity: 'info'
  },
  'TOOL_ERROR': {
    icon: '‚ö†Ô∏è',
    message: 'L·ªói khi th·ª±c hi·ªán thao t√°c v·ªõi tool',
    duration: 8000,
    severity: 'error'
  },
  
  // Network errors
  'NETWORK_ERROR': {
    icon: 'üåê',
    message: 'L·ªói k·∫øt n·ªëi m·∫°ng, vui l√≤ng ki·ªÉm tra internet',
    duration: 8000,
    severity: 'error'
  },
  'SERVER_ERROR': {
    icon: 'üñ•Ô∏è',
    message: 'Server ƒëang g·∫∑p s·ª± c·ªë, vui l√≤ng th·ª≠ l·∫°i sau',
    duration: 10000,
    severity: 'error'
  },
  'TIMEOUT_ERROR': {
    icon: '‚è±Ô∏è',
    message: 'Y√™u c·∫ßu timeout, vui l√≤ng th·ª≠ l·∫°i',
    duration: 5000,
    severity: 'warning'
  }
};

// Enhanced error message handler
function showErrorMessage(errorCode, customMessage = null, additionalInfo = null) {
  const errorConfig = ERROR_CODES[errorCode];
  
  if (!errorConfig) {
    // Fallback cho unknown error codes
    showMessage(`‚ùå ${customMessage || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`, 'error');
    return;
  }
  
  let message = `${errorConfig.icon} ${customMessage || errorConfig.message}`;
  if (additionalInfo) {
    message += `\n${additionalInfo}`;
  }
  
  showMessage(message, errorConfig.severity, errorConfig.duration);
}

// === SOCKET EVENT LISTENERS ===

socket.on('connect', () => {
  console.log('[SOCKET] Connected to server');
  
  // Initialize SocketOptimizer cho performance monitoring
  try {
    if (typeof SocketOptimizer !== 'undefined' && !socketOptimizer) {
      socketOptimizer = new SocketOptimizer(socket);
      console.log('[SOCKET] Performance optimizer initialized');
    }
  } catch (e) {
    console.warn('[SOCKET] Failed to initialize optimizer:', e.message);
  }
  
  // Ch·ªâ hi·ªán th√¥ng b√°o k·∫øt n·ªëi khi user ƒë√£ ƒëƒÉng nh·∫≠p
  if (currentToken) {
    createFloatingMessage('üîó K·∫øt n·ªëi server th√†nh c√¥ng', 'success', 2000);
    
    // Register client ƒë·ªÉ nh·∫≠n updates
    socket.emit('register-client', {
      token: currentToken,
      clientId: `dashboard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      email: emailSpan.textContent || 'Unknown',
      userAgent: navigator.userAgent
    });
  }
});

// Socket events - t·ªëi ∆∞u th√¥ng b√°o
let lastConnectionTime = 0;
let connectionMessageCount = 0;

socket.on('disconnect', () => {
  // Throttle disconnect messages
  const now = Date.now();
  if (now - lastConnectionTime > 30000) { // Ch·ªâ hi·ªán 1 l·∫ßn trong 30s
    createFloatingMessage('‚ö†Ô∏è M·∫•t k·∫øt n·ªëi t·ªõi server', 'warning', 3000);
    lastConnectionTime = now;
  }
});

socket.on('connect_error', (error) => {
  console.error('[DASHBOARD] Connection error:', error.message);
  // Throttle error messages
  const now = Date.now();
  if (now - lastConnectionTime > 60000) { // Ch·ªâ hi·ªán 1 l·∫ßn trong 1 ph√∫t
    createFloatingMessage('‚ùå L·ªói k·∫øt n·ªëi server', 'error', 5000);
    lastConnectionTime = now;
  }
});

socket.on('reconnect', (attemptNumber) => {
  // Ch·ªâ hi·ªán th√¥ng b√°o reconnect th√†nh c√¥ng sau l·∫ßn th·ª© 2
  if (attemptNumber > 1) {
    createFloatingMessage('‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i server!', 'success', 2000);
  }
});

socket.on('reconnect_error', (error) => {
  // Ch·ªâ log error, kh√¥ng hi·ªán popup li√™n t·ª•c
  console.error('[DASHBOARD] Reconnect error:', error.message);
  if (connectionMessageCount < 3) {
    createFloatingMessage('‚ö†Ô∏è L·ªói k·∫øt n·ªëi l·∫°i server. ƒêang th·ª≠ l·∫°i...', 'warning', 5000);
    connectionMessageCount++;
  }
});

// Th√™m c√°c socket events b·ªï sung ƒë·ªÉ x·ª≠ l√Ω m·∫•t k·∫øt n·ªëi
socket.on('reconnect_failed', () => {
  console.error('[SOCKET] All reconnection attempts failed');
  createFloatingMessage('‚ùå M·∫•t k·∫øt n·ªëi server! Vui l√≤ng ki·ªÉm tra m·∫°ng v√† restart app.', 'error', 10000);
});

socket.on('connect_timeout', () => {
  console.warn('[SOCKET] Connection timeout');
  createFloatingMessage('‚è±Ô∏è K·∫øt n·ªëi server timeout. ƒêang th·ª≠ l·∫°i...', 'warning', 5000);
});

// Network status monitoring
window.addEventListener('online', () => {
  console.log('[NETWORK] Network connection restored');
  createFloatingMessage('üåê K·∫øt n·ªëi m·∫°ng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!', 'success', 3000);
  // Reconnect socket if disconnected
  if (!socket.connected) {
    console.log('[SOCKET] Attempting to reconnect after network restoration');
    socket.connect();
  }
});

window.addEventListener('offline', () => {
  console.warn('[NETWORK] Network connection lost');
  createFloatingMessage('üì° M·∫•t k·∫øt n·ªëi m·∫°ng! M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.', 'error', 8000);
});

// Debug events - ch·ªâ log error v√† payment events
socket.onAny((eventName, ...args) => {
  if (eventName.includes('error') || eventName.includes('payment') || eventName.includes('fail')) {
    console.log('[SOCKET]', eventName, args);
  }
});

// Force reload dashboard khi b·∫•m n√∫t L√†m m·ªõi
if (reloadBtn) {
  reloadBtn.addEventListener('click', async () => {
    // Disable button during operation
    reloadBtn.disabled = true;
    reloadBtn.innerHTML = 'üîÑ ƒêang l√†m m·ªõi...';
    
    try {
      showMessage('üîÑ ƒêang ƒë·ªìng b·ªô cookies cho t·∫•t c·∫£ tool...', 'info');
      
      // Sync cookies for all active tools
      for (const tool of toolsData) {
        if (tool.status === 'active') {
          await manualSyncCookies(tool.code);
        }
      }
      
      // Reload user balance
      loadUserBalance();
      
    } catch (error) {
      console.error('Error during refresh:', error);
      showErrorMessage('SERVER_ERROR', 'C√≥ l·ªói x·∫£y ra khi l√†m m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      // Re-enable button
      reloadBtn.disabled = false;
      reloadBtn.innerHTML = 'üîÑ L√†m m·ªõi';
    }
  });
}
socket.on('cookies-saved', (data) => {
  console.log('[DASHBOARD] Cookies saved event received:', data);
  
  if (data.success) {
        
    // Enhanced sync with validation
    if (data.account_id) {
      syncCookiesForActiveTool(data.account_id).catch(error => {
        console.error('[DASHBOARD] Auto sync failed after cookie save:', error);
        showMessage('‚ö†Ô∏è L·ªói ƒë·ªìng b·ªô cookies t·ª± ƒë·ªông', 'warning');
      });
    }
  } else {
    console.error('[DASHBOARD] Cookie save failed:', data.error);
    showErrorMessage('SERVER_ERROR', `L·ªói c·∫≠p nh·∫≠t cookies: ${data.error || 'Unknown error'}`);
  }
});

socket.on('sync-cookies', async (data) => {
  console.log('[DASHBOARD] Sync cookies event received:', data);
  
  if (data.toolCode && data.cookies) {
    try {
      // Enhanced validation
      if (!Array.isArray(data.cookies)) {
        throw new Error('Invalid cookies format - expected array');
      }
      
      if (data.cookies.length === 0) {
        console.warn('[DASHBOARD] No cookies to sync for:', data.toolCode);
        return;
      }
      
      console.log(`[DASHBOARD] Syncing ${data.cookies.length} cookies for ${data.toolCode}`);
      
      const result = await window.electronAPI.applyCookies(data.toolCode, data.cookies);
      
      if (result && result.success) {
        showMessage(`‚úÖ ƒê√£ ƒë·ªìng b·ªô cookies cho ${data.toolCode}`, 'success');
      } else {
        throw new Error(result?.error || 'Apply cookies failed');
      }
    } catch (e) {
      console.error('[DASHBOARD] Apply cookies error:', e);
      showMessage(`‚ùå L·ªói ƒë·ªìng b·ªô cookies cho ${data.toolCode}: ${e.message}`, 'error');
    }
  } else {
    console.warn('[DASHBOARD] Invalid sync-cookies data:', data);
    showMessage('‚ö†Ô∏è D·ªØ li·ªáu ƒë·ªìng b·ªô cookies kh√¥ng h·ª£p l·ªá', 'warning');
  }
});

socket.on('reload-dashboard', () => {
  showMessage('üîÑ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'info');
  // T·ª± ƒë·ªông reload th√¥ng tin tools
  if (currentToken) {
    setTimeout(() => {
      window.electronAPI.getTokenInfo({ token: currentToken }).then(info => {
        if (info && info.success) {
          toolsData = (info.tools || []).map(tool => ({
            code: tool.code,
            name: tool.name,
            status: tool.active ? 'active' : 'inactive',
            expiry: tool.expiry,
            credit: tool.credit,
            max_rows_per_month: tool.max_rows_per_month || 0,
            daily_credit_limit: tool.daily_credit_limit || 0
          }));
          renderTools();
        }
      });
    }, 500);
  }
});

// Socket listener cho tool update realtime
socket.on('tool-updated', (data) => {
  if (data.token === currentToken) {
    // T√¨m v√† c·∫≠p nh·∫≠t tool trong toolsData
    const toolIndex = toolsData.findIndex(t => t.code === data.tool_name);
    if (toolIndex !== -1) {
      toolsData[toolIndex].credit = data.credit;
      toolsData[toolIndex].expiry = data.expiry_time;
      toolsData[toolIndex].status = data.active ? 'active' : 'inactive';
      renderTools(); // Re-render ƒë·ªÉ c·∫≠p nh·∫≠t UI v·ªõi ng√†y gi·ªù m·ªõi
      showMessage(`‚úÖ Tool ${data.tool_name} ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t!`, 'success');
    }
  }
});

// Socket listener cho token b·ªã block
socket.on('token-blocked', (data) => {
  console.log('[SOCKET] Token blocked event:', data);
  showMessage('üö´ ' + data.message, 'error', 10000);
  
  // Force logout user
  setTimeout(() => {
    currentToken = null;
    userBalance = 0;
    infoBar.style.display = 'none';
    toolsGrid.innerHTML = '';
    toolsGrid.style.display = 'none';
    tokenInput.value = '';
    loginForm.style.display = 'block';
    localStorage.removeItem('muatool_token');
    
    // ƒê√≥ng app sau 1 gi√¢y
    setTimeout(() => {
      window.electronAPI.forceQuitApp();
    }, 1000);
  }, 3000);
});

// Socket listener cho check token status
socket.on('check-token-status', (data) => {
  if (data.blockedToken && currentToken === data.blockedToken) {
    console.log('[SOCKET] Current token is blocked, logging out...');
    showMessage('üö´ Token ƒë√£ b·ªã kh√≥a! ƒêang ƒëƒÉng xu·∫•t...', 'error', 5000);
    
    // Force logout
    setTimeout(() => {
      currentToken = null;
      userBalance = 0;
      infoBar.style.display = 'none';
      toolsGrid.innerHTML = '';
      toolsGrid.style.display = 'none';
      tokenInput.value = '';
      loginForm.style.display = 'block';
      localStorage.removeItem('muatool_token');
      window.electronAPI.forceQuitApp();
    }, 2000);
  }
});

// === ENHANCED HELPER FUNCTIONS ===
async function syncCookiesForActiveTool(accountId) {
  console.log('[DASHBOARD] Starting auto sync for account:', accountId);
  
  if (!accountId || !currentToken) {
    console.warn('[DASHBOARD] Missing accountId or token for auto sync');
    return;
  }
  
  try {
    // Enhanced validation and retry mechanism
    let attempts = 0;
    const maxAttempts = 3;
    
    const attemptSync = async () => {
      attempts++;
      console.log(`[DASHBOARD] Auto sync attempt ${attempts}/${maxAttempts} for account: ${accountId}`);
      
      try {
        const result = await window.electronAPI.getToolCookies({ 
          token: currentToken, 
          account_id: accountId 
        });
        
        if (!result) {
          throw new Error('No response from getToolCookies');
        }
        
        if (!result.success) {
          throw new Error(result.error || 'getToolCookies failed');
        }
        
        if (!result.cookies || !Array.isArray(result.cookies)) {
          console.warn('[DASHBOARD] No valid cookies returned for account:', accountId);
          return { success: true, message: 'No cookies to sync' };
        }
        
        if (result.cookies.length === 0) {
          console.warn('[DASHBOARD] Empty cookies array for account:', accountId);
          return { success: true, message: 'No cookies to sync' };
        }
        
        console.log(`[DASHBOARD] Got ${result.cookies.length} cookies for ${result.tool_name}`);
        
        // Apply cookies with validation
        const applyResult = await window.electronAPI.applyCookies(result.tool_name, result.cookies);
        
        if (applyResult && !applyResult.success) {
          throw new Error(applyResult.error || 'Apply cookies failed');
        }
        
        console.log(`[DASHBOARD] Successfully synced cookies for ${result.tool_name}`);
        
        
        return { success: true, tool_name: result.tool_name, count: result.cookies.length };
      } catch (error) {
        console.error(`[DASHBOARD] Auto sync attempt ${attempts} failed:`, error.message);
        
        if (attempts < maxAttempts) {
          console.log(`[DASHBOARD] Retrying auto sync in ${attempts * 500}ms...`);
          await new Promise(resolve => setTimeout(resolve, attempts * 500));
          return attemptSync();
        } else {
          throw error;
        }
      }
    };
    
    await attemptSync();
  } catch (e) {
    console.error('[DASHBOARD] Auto sync cookies failed after all attempts:', e.message);
    showMessage(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·ª± ƒë·ªông ƒë·ªìng b·ªô cookies: ${e.message}`, 'warning');
  }
}

async function manualSyncCookies(toolCode) {
  console.log('[DASHBOARD] Starting manual sync for tool:', toolCode);
  
  if (!currentToken || !toolCode) {
    console.warn('[DASHBOARD] Missing token or toolCode for manual sync');
    showMessage('‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒë·ªÉ ƒë·ªìng b·ªô cookies', 'warning');
    return;
  }
  
  showMessage('üîÑ ƒêang l·∫•y cookies m·ªõi nh·∫•t...', 'info');
  
  try {
    let attempts = 0;
    const maxAttempts = 2;
    
    const attemptManualSync = async () => {
      attempts++;
      console.log(`[DASHBOARD] Manual sync attempt ${attempts}/${maxAttempts} for tool: ${toolCode}`);
      
      try {
        const result = await window.electronAPI.getToolCookies({ 
          token: currentToken, 
          tool_name: toolCode 
        });
        
        if (!result) {
          throw new Error('No response from getToolCookies');
        }
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to get cookies');
        }
        
        if (!result.cookies || !Array.isArray(result.cookies) || result.cookies.length === 0) {
          showMessage(`‚ö†Ô∏è Kh√¥ng c√≥ cookies m·ªõi cho ${toolCode}`, 'warning');
          return;
        }
        
        console.log(`[DASHBOARD] Got ${result.cookies.length} cookies for manual sync`);
        
        const applyResult = await window.electronAPI.applyCookies(toolCode, result.cookies);
        
        if (applyResult && !applyResult.success) {
          throw new Error(applyResult.error || 'Apply cookies failed');
        }
        
        showMessage(`‚úÖ ƒê√£ ƒë·ªìng b·ªô cookies cho ${toolCode}`, 'success');
        console.log(`[DASHBOARD] Manual sync completed for ${toolCode}`);
      } catch (error) {
        console.error(`[DASHBOARD] Manual sync attempt ${attempts} failed:`, error.message);
        
        if (attempts < maxAttempts) {
          console.log(`[DASHBOARD] Retrying manual sync...`);
          await new Promise(resolve => setTimeout(resolve, 800));
          return attemptManualSync();
        } else {
          throw error;
        }
      }
    };
    
    await attemptManualSync();
  } catch (e) {
    console.error('[DASHBOARD] Manual sync cookies failed:', e.message);
    showMessage(`‚ùå L·ªói khi ƒë·ªìng b·ªô cookies cho ${toolCode}: ${e.message}`, 'error');
  }
}

// H·ªá th·ªëng qu·∫£n l√Ω floating message - ch·ªëng spam
const FloatingMessageManager = {
  lastMessage: '',
  lastMessageTime: 0,
  messageQueue: [],
  isShowing: false,
  
  // Throttle messages gi·ªëng nhau
  shouldShowMessage(text, type) {
    const now = Date.now();
    const isDuplicate = this.lastMessage === text && (now - this.lastMessageTime) < 3000;
    
    if (isDuplicate) {
      console.log('[FLOATMSG] Skipped duplicate:', text);
      return false;
    }
    
    this.lastMessage = text;
    this.lastMessageTime = now;
    return true;
  },
  
  // Queue messages ƒë·ªÉ tr√°nh overlap
  addToQueue(text, type, timeout) {
    this.messageQueue.push({ text, type, timeout });
    this.processQueue();
  },
  
  processQueue() {
    if (this.isShowing || this.messageQueue.length === 0) return;
    
    const { text, type, timeout } = this.messageQueue.shift();
    this.showMessage(text, type, timeout);
  },
  
  showMessage(text, type, timeout) {
    this.isShowing = true;
    
    // X√≥a th√¥ng b√°o c≈©
    const oldFloating = document.getElementById('floating-message');
    if (oldFloating) oldFloating.remove();
    
    const floatingDiv = document.createElement('div');
    floatingDiv.id = 'floating-message';
    
    // Style theo type - simplified
    let bgColor, borderColor, textColor;
    switch(type) {
      case 'success':
        bgColor = '#d4edda'; borderColor = '#27ae60'; textColor = '#155724';
        break;
      case 'error':
        bgColor = '#f8d7da'; borderColor = '#dc3545'; textColor = '#721c24';
        break;
      case 'warning':
        bgColor = '#fff3cd'; borderColor = '#ffc107'; textColor = '#856404';
        break;
      default:
        bgColor = '#d1ecf1'; borderColor = '#17a2b8'; textColor = '#0c5460';
    }
    
    floatingDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10000;
      max-width: 350px;
      min-width: 250px;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.15);
      font-family: system-ui, -apple-system, sans-serif;
      font-weight: 500;
      font-size: 14px;
      background: ${bgColor};
      border: 2px solid ${borderColor};
      color: ${textColor};
      cursor: pointer;
      animation: slideInRight 0.3s ease-out;
    `;
    
    floatingDiv.innerHTML = text;
    
    // Click ƒë·ªÉ ƒë√≥ng
    floatingDiv.onclick = () => this.hideMessage(floatingDiv);
    
    document.body.appendChild(floatingDiv);
    
    // Auto hide
    setTimeout(() => this.hideMessage(floatingDiv), timeout);
  },
  
  hideMessage(floatingDiv) {
    if (floatingDiv && floatingDiv.parentNode) {
      floatingDiv.style.animation = 'slideOutRight 0.2s ease-in forwards';
      setTimeout(() => {
        if (floatingDiv.parentNode) floatingDiv.remove();
        this.isShowing = false;
        this.processQueue(); // Process next message
      }, 200);
    } else {
      this.isShowing = false;
      this.processQueue();
    }
  }
};

function showMessage(text, type = 'info', timeout = 4000) {
  createFloatingMessage(text, type, timeout);
}

// Optimized floating message function
function createFloatingMessage(text, type = 'info', timeout = 4000) {
  // Check n·∫øu c·∫ßn hi·ªÉn th·ªã
  if (!FloatingMessageManager.shouldShowMessage(text, type)) {
    return;
  }
  
  // Add to queue ƒë·ªÉ tr√°nh overlap
  FloatingMessageManager.addToQueue(text, type, timeout);
}

// Add CSS animations for floating messages - m·ªôt l·∫ßn duy nh·∫•t
if (!document.getElementById('floating-animation-css')) {
  const style = document.createElement('style');
  style.id = 'floating-animation-css';
  style.textContent = `
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOutRight {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;
  document.head.appendChild(style);
}

// T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p n·∫øu c√≥ token ƒë√£ l∆∞u
window.addEventListener('DOMContentLoaded', () => {
  const savedToken = localStorage.getItem('muatool_token');
  const versionBox = document.getElementById('dashboard-version-text');
  if (versionBox) {
    versionBox.textContent = 'v1.2.0';
  }
  if (savedToken) {
    autoLoginWithToken(savedToken);
  }
});

async function autoLoginWithToken(token, isRetry = false) {
  tokenInput.value = token;
  loginBtn.disabled = true;
  // Gi·∫£m th√¥ng b√°o auto login - ch·ªâ khi c·∫ßn
  console.log('[AUTO LOGIN] Starting auto login...');
  
  try {
    // 1. Validate device session tr∆∞·ªõc
    const deviceValidation = await window.electronAPI.validateTokenDevice(token);
    // if (!deviceValidation.success) {
    //   let errorMessage = deviceValidation.error;
    //   if (deviceValidation.code === 'TOKEN_BLOCKED') {
    //     errorMessage += ` (C√≤n ${Math.ceil(deviceValidation.remainingTime / 60)} ph√∫t)`;
    //   } else if (deviceValidation.code === 'DEVICE_CONFLICT') {
    //     errorMessage = 'üö´ Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n m√°y t√≠nh kh√°c v√† b·ªã kh√≥a!';
    //   }
    //   // N·∫øu l·ªói t·∫°m th·ªùi (server down) th√¨ kh√¥ng x√≥a token, b·∫≠t auto-retry
    //   if (isTransientError(deviceValidation.error, deviceValidation.code)) {
    //     AutoLoginRetry.start(token, 'device_validation');
    //     return;
    //   }

    //   showMessage(errorMessage, 'error', 8000);
    //   localStorage.removeItem('muatool_token');
    //   return;
    // }

    // 2. L·∫•y th√¥ng tin token sau khi device validation th√†nh c√¥ng
    const info = await window.electronAPI.getTokenInfo({ token });
    if (info && info.success) {
      loginForm.style.display = 'none';
      infoBar.style.display = 'block';
      toolsGrid.style.display = 'grid';
      emailSpan.textContent = info.email || 'User';
      // Hi·ªÉn th·ªã 40% k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa token, th√™m n√∫t copy
      renderTokenMasked(token);
      
      let successMessage = '‚úÖ ƒêƒÉng nh·∫≠p t·ª± ƒë·ªông th√†nh c√¥ng!';
      if (deviceValidation.isNewDevice) {
        successMessage += ' (Device m·ªõi ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω)';
      }
      showMessage(successMessage, 'success');
      
      currentToken = token;
      
      // ƒêƒÉng k√Ω socket client
      socket.emit('register-client', {
        token: currentToken,
        clientId: `dashboard_${Date.now()}`,
        email: info.email || 'User'
      });
      
      checkCredit();
      toolsData = (info.tools || []).map(tool => ({
        code: tool.code,
        name: tool.name,
        status: tool.active ? 'active' : 'inactive',
        expiry: tool.expiry,
        credit: tool.credit,
        max_rows_per_month: tool.max_rows_per_month || 0,
        daily_credit_limit: tool.daily_credit_limit || 0
      }));
      renderTools();
      loadUserBalance(); // Always update balance after login

      // ƒêƒÉng nh·∫≠p th√†nh c√¥ng -> d·ª´ng retry (n·∫øu c√≥)
      AutoLoginRetry.stop();
    } else {
      // N·∫øu server t·∫°m th·ªùi kh√¥ng s·∫µn s√†ng -> b·∫≠t retry, gi·ªØ token
      if (info && isTransientError(info.error, info.code)) {
        AutoLoginRetry.start(token, 'get_token_info');
        return;
      }
      showMessage('‚ùå Token ƒë√£ l∆∞u kh√¥ng h·ª£p l·ªá!', 'error');
      localStorage.removeItem('muatool_token');
    }
  } catch (e) {
    console.error('[AUTO_LOGIN] Error:', e);
    // L·ªói m·∫°ng/timeout: gi·ªØ token v√† auto-retry
    if (isTransientError(e.message)) {
      AutoLoginRetry.start(token, 'exception');
    } else {
      showMessage('‚ùå L·ªói khi t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p!', 'error');
      localStorage.removeItem('muatool_token');
    }
  } finally {
    loginBtn.disabled = false;
  }
}

// ƒêƒÉng nh·∫≠p v√† l·∫•y th√¥ng tin user + danh s√°ch tool t·ª´ API th·ª±c t·∫ø
loginBtn.addEventListener('click', async () => {
  const token = tokenInput.value.trim();
  if (!token) {
    showMessage('‚ùå Vui l√≤ng nh·∫≠p token!', 'error');
    return;
  }
  currentToken = token;
  showMessage('üîÑ ƒêang ki·ªÉm tra token v√† device...', 'info');
  
  try {
    // 1. Validate device session tr∆∞·ªõc khi l·∫•y th√¥ng tin token
    const deviceValidation = await window.electronAPI.validateTokenDevice(token);
    if (!deviceValidation.success) {
      // Hi·ªÉn th·ªã l·ªói device validation
      let errorMessage = deviceValidation.error;
      if (deviceValidation.code === 'TOKEN_BLOCKED') {
        errorMessage += ` (C√≤n ${Math.ceil(deviceValidation.remainingTime / 60)} ph√∫t)`;
      } else if (deviceValidation.code === 'DEVICE_CONFLICT') {
        errorMessage = 'üö´ Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n m√°y t√≠nh kh√°c!\nüîí Token b·ªã kh√≥a trong 5 ph√∫t ƒë·ªÉ b·∫£o m·∫≠t.';
      }
      // N·∫øu l·ªói t·∫°m th·ªùi -> b·∫≠t auto retry, kh√¥ng x√≥a
      if (isTransientError(deviceValidation.error, deviceValidation.code)) {
        AutoLoginRetry.start(token, 'device_validation_manual');
        return;
      }
      showMessage(errorMessage, 'error', 10000);
      return;
    }

    console.log('[LOGIN] Device validation passed:', deviceValidation);

    // 2. L·∫•y th√¥ng tin token sau khi device validation th√†nh c√¥ng
    const info = await window.electronAPI.getTokenInfo({ token });
    if (info && info.success) {
      // ·∫®n form ƒëƒÉng nh·∫≠p, show dashboard
      loginForm.style.display = 'none';
      infoBar.style.display = 'block';
      toolsGrid.style.display = 'grid';
      emailSpan.textContent = info.email || 'User';
      // Hi·ªÉn th·ªã 40% k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa token, th√™m n√∫t copy
      renderTokenMasked(token);
      
      let successMessage = '‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!';
      if (deviceValidation.isNewDevice) {
        successMessage += ' (Device m·ªõi ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω)';
      }
      showMessage(successMessage, 'success');
      
      localStorage.setItem('muatool_token', token);
      
      // ƒêƒÉng k√Ω socket client
      socket.emit('register-client', {
        token: currentToken,
        clientId: `dashboard_${Date.now()}`,
        email: info.email || 'User'
      });
      
      checkCredit();
      toolsData = (info.tools || []).map(tool => ({
        code: tool.code,
        name: tool.name,
        status: tool.active ? 'active' : 'inactive',
        expiry: tool.expiry,
        credit: tool.credit,
        max_rows_per_month: tool.max_rows_per_month || 0,
        daily_credit_limit: tool.daily_credit_limit || 0
      }));
      renderTools();
      loadUserBalance(); // Always update balance after login
    } else {
      if (info && isTransientError(info.error, info.code)) {
        AutoLoginRetry.start(token, 'get_token_info_manual');
        return;
      }
      showMessage('‚ùå Token kh√¥ng h·ª£p l·ªá!', 'error');
    }
  } catch (e) {
    if (isTransientError(e.message)) {
      AutoLoginRetry.start(token, 'exception_manual');
    } else {
      showMessage('‚ùå L·ªói khi ki·ªÉm tra token!', 'error');
    }
  }
});

// ƒêƒÉng xu·∫•t
logoutBtn.addEventListener('click', () => {
  // Emit logout event
  if (currentToken) {
    socket.emit('client-logout', { token: currentToken });
  }
  
  currentToken = null;
  userBalance = 0;
  infoBar.style.display = 'none';
  toolsGrid.innerHTML = '';
  toolsGrid.style.display = 'none';
  tokenInput.value = '';
  loginForm.style.display = 'block';
  localStorage.removeItem('muatool_token');
  showMessage('ƒê√£ ƒëƒÉng xu·∫•t!', 'success');
});

// Event listener cho n√∫t N·∫°p ti·ªÅn
rechargeBtn.addEventListener('click', () => {
  document.getElementById('rechargeModal').style.display = 'block';
  // Reset form v√† ·∫©n QR c≈©
  document.getElementById('rechargeForm').reset();
  document.getElementById('paymentInstructions').style.display = 'none';
  // Reset selected amount buttons
  document.querySelectorAll('.amount-btn').forEach(btn => {
    btn.style.background = 'white';
    btn.style.borderColor = '#ddd';
    btn.style.color = 'black';
  });
});

// X·ª≠ l√Ω ch·ªçn m·ªánh gi√°
document.addEventListener('DOMContentLoaded', () => {
  // X·ª≠ l√Ω n√∫t ch·ªçn m·ªánh gi√°
  document.querySelectorAll('.amount-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const amount = btn.getAttribute('data-amount');
      document.getElementById('rechargeAmount').value = amount;
      document.getElementById('customAmount').value = '';
      
      // Reset t·∫•t c·∫£ n√∫t
      document.querySelectorAll('.amount-btn').forEach(b => {
        b.style.background = 'white';
        b.style.borderColor = '#ddd';
        b.style.color = 'black';
      });
      
      // Highlight n√∫t ƒë∆∞·ª£c ch·ªçn
      btn.style.background = '#27ae60';
      btn.style.borderColor = '#27ae60';
      btn.style.color = 'white';
    });
  });

  // X·ª≠ l√Ω nh·∫≠p custom amount
  const customAmountInput = document.getElementById('customAmount');
  if (customAmountInput) {
    customAmountInput.addEventListener('input', (e) => {
      document.getElementById('rechargeAmount').value = e.target.value;
      // Reset t·∫•t c·∫£ n√∫t khi nh·∫≠p custom
      document.querySelectorAll('.amount-btn').forEach(b => {
        b.style.background = 'white';
        b.style.borderColor = '#ddd';
        b.style.color = 'black';
      });
    });
  }
});

// Event listener cho n√∫t L·ªãch s·ª≠ giao d·ªãch
transactionHistoryBtn.addEventListener('click', () => {
  loadTransactionHistory();
  document.getElementById('transactionModal').style.display = 'block';
});

// ƒê√≥ng modal n·∫°p ti·ªÅn
document.getElementById('closeRechargeModal').addEventListener('click', closeRechargeModal);

// ƒê√≥ng modal l·ªãch s·ª≠ giao d·ªãch
document.getElementById('closeTransactionModal').addEventListener('click', closeTransactionModal);

// X·ª≠ l√Ω form n·∫°p ti·ªÅn
document.getElementById('rechargeForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const amount = parseFloat(document.getElementById('rechargeAmount').value);
  
  if (!amount || amount < 1000) {
    alert('S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 1,000ƒë');
    return;
  }
  
  try {
    // ·∫®n form nh·∫≠p ti·ªÅn v√† hi·ªán QR thay th·∫ø
    const rechargeForm = document.getElementById('rechargeForm');
    const qrBox = document.getElementById('paymentInstructions');
    
    if (rechargeForm) {
      rechargeForm.style.display = 'none'; // ·∫®n form nh·∫≠p ti·ªÅn
    }
    
    showMessage('üîÑ ƒêang t·∫°o m√£ QR ...', 'info');
    const token = currentToken || localStorage.getItem('muatool_token');
    showSepayQRDirectFullScreen(amount, token);
  

    // Th√™m ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c 10 ph√∫t v√†o QR container
    let countdown = 600; // 10 ph√∫t = 600 gi√¢y
    const timerDiv = document.createElement('div');
    timerDiv.id = 'qrCountdownTimer';
    timerDiv.style = 'margin-top: 15px; padding: 12px; background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); border-radius: 8px; color: white; text-align: center;';
    
    // Find the QR container and append timer to it
    const qrContainer = document.getElementById('qrContainer');
    if (qrContainer) {
      timerDiv.innerHTML = `
        <div style="font-size: 13px; font-weight: 600;">‚è∞ Th·ªùi gian c√≤n l·∫°i</div>
        <div id="countdownDisplay" style="font-size: 18px; font-weight: 700; font-family: monospace; margin-top: 4px;">10:00</div>
      `;
      qrContainer.appendChild(timerDiv);
    }
    
    function updateTimer() {
      const min = Math.floor(countdown / 60);
      const sec = countdown % 60;
      const countdownDisplay = document.getElementById('countdownDisplay');
      if (countdownDisplay) {
        countdownDisplay.textContent = `${min}:${sec.toString().padStart(2,'0')}`;
      }
      if (countdown <= 0) {
        clearInterval(timerInterval);
        closeRechargeModal();
        showMessage('‚è∞ H·∫øt th·ªùi gian ch·ªù QR. Vui l√≤ng t·∫°o l·∫°i m√£ QR n·∫øu mu·ªën n·∫°p ti·∫øp.', 'warning');
      }
      countdown--;
    }
    updateTimer();
    const timerInterval = setInterval(updateTimer, 1000);

    // L∆∞u timer ƒë·ªÉ clear khi ƒë√≥ng modal
    window.currentPaymentTimer = timerInterval;
  }
  catch (error) {
    alert('L·ªói khi t·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn: ' + error.message);
  }
});

// Ki·ªÉm tra credit
async function checkCredit() {
  if (!currentToken) return;
  try {
    const res = await window.electronAPI.checkCredit(currentToken);
    if (res && res.success) {
      const el = document.getElementById('creditAmount');
      if (el) el.textContent = res.credit;
    } else {
      const el = document.getElementById('creditAmount');
      if (el) el.textContent = '-';
    }
  } catch (e) {
    const el = document.getElementById('creditAmount');
    if (el) el.textContent = '-';
  }
}

// X√≥a ho√†n to√†n ch·ªØ 'Credit:' tr√™n giao di·ªán
const creditBox = document.querySelector('.credit-info');
if (creditBox) {
  creditBox.innerHTML = '';
  // Credit info ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o layout m·ªõi, kh√¥ng c·∫ßn th√™m g√¨ ·ªü ƒë√¢y
}

// ·∫®n d√≤ng 'ƒêang k·∫øt n·ªëi...' n·∫øu c√≥
const connectingText = document.querySelector('body > .connecting-text, .connecting-text');
if (connectingText) connectingText.style.display = 'none';

function renderTools() {
  toolsGrid.innerHTML = '';
  if (!toolsData.length) {
    toolsGrid.innerHTML = '<div>Kh√¥ng c√≥ tool n√†o trong h·ªá th·ªëng.</div>';
    return;
  }
  
  // S·∫Øp x·∫øp: active l√™n tr√™n, inactive xu·ªëng d∆∞·ªõi, trong m·ªói nh√≥m A->Z
  const sortedTools = [...toolsData].sort((a, b) => {
    if (a.status === 'active' && b.status !== 'active') return -1;
    if (a.status !== 'active' && b.status === 'active') return 1;
    return a.name.localeCompare(b.name, 'vi');
  });
  
  sortedTools.forEach(tool => {
    const card = document.createElement('div');
    card.className = 'tool-card';
    
    // X√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªÉn th·ªã
    const statusText = tool.status === 'active' ? 'ACTIVE' : 'INACTIVE';
    const statusClass = tool.status === 'active' ? 'status-active' : 'status-inactive';
    
    // ƒê·ªãnh d·∫°ng expiry
    let expiryText = 'Ch∆∞a k√≠ch ho·∫°t';
    if (tool.status === 'active' && tool.expiry) {
      try {
        const expiryDate = new Date(tool.expiry);
        if (!isNaN(expiryDate.getTime())) {
          expiryText = expiryDate.toLocaleString('vi-VN');
        } else {
          expiryText = 'L·ªói ƒë·ªãnh d·∫°ng ng√†y';
        }
      } catch (e) {
        console.error('Error formatting expiry date:', e, tool.expiry);
        expiryText = 'L·ªói ƒë·ªãnh d·∫°ng ng√†y';
      }
    }
    
    // ƒê·ªãnh d·∫°ng credit theo lo·∫°i tool
    let creditLabel = 'Credit:';
    let creditValue = '-';
    
    if (tool.status === 'active') {
      const currentCredit = tool.credit || 0;
      
      // Ahrefs: Hi·ªÉn th·ªã Credit + Export rows t·ª´ DB
      if (tool.code === 'ahrefs') {
        const maxRows = tool.max_rows_per_month || 0;
        creditLabel = 'Credit:';
        creditValue = `${currentCredit} | Export rows: ${maxRows.toLocaleString('vi-VN')}`;
      }
      // Daily tools: Hi·ªÉn th·ªã Credit: X/Y v·ªõi Y t·ª´ DB
      else if (tool.daily_credit_limit > 0) {
        creditValue = `${currentCredit}/${tool.daily_credit_limit}`;
      }
      // Other tools: Hi·ªÉn th·ªã credit th∆∞·ªùng
      else {
        creditValue = currentCredit.toString();
      }
    }
    
    card.innerHTML = `
      <div class="tool-header">
        <span class="tool-name">${tool.name}</span>
        <span class="status-badge ${statusClass}">${statusText}</span>
      </div>
      <div class="tool-actions">
        <button class="btn btn-tool btn-sm" data-code="${tool.code}" ${tool.status !== 'active' ? 'disabled' : ''}>
          ${tool.status === 'active' ? 'OPEN TOOL' : 'INACTIVE'}
        </button>
        <button class="btn btn-buy btn-sm" data-code="${tool.code}">BUY</button>
      </div>
      <div class="tool-info">
        <span class="tool-expiry"><b>H·∫°n:</b> <span style="color:#3742fa">${expiryText}</span></span><br>
        <span class="tool-credit"><b>${creditLabel}</b> <span style="color:${tool.status === 'active' ? '#009432' : '#999'}">${creditValue}</span></span>
      </div>
    `;
    toolsGrid.appendChild(card);
  });
  
  // G√°n s·ª± ki·ªán cho n√∫t M·ªû TOOL (ch·ªâ cho tool active)
  document.querySelectorAll('.btn-tool:not([disabled])').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const code = e.target.getAttribute('data-code');
      if (currentToken && code) {
        // L·∫•y credit c·ªßa tool n√†y
        const tool = toolsData.find(t => t.code === code);
        if (tool && tool.status !== 'active') {
          alert('Tool ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng li√™n h·ªá admin!');
          return;
        }
        if (tool && typeof tool.credit === 'number' && tool.credit < 0) {
          alert('G√≥i c·ªßa b·∫°n ƒë√£ h·∫øt credit. Li√™n h·ªá admin ƒë·ªÉ mua ti·∫øp nha!');
          return;
        }
        
        // Open the tool v·ªõi error handling
        try {
          showMessage(`üîë ƒêang m·ªü tool ${code}...`, 'info');
          const result = await window.electronAPI.openTool(code, currentToken);
          
          if (result && !result.success) {
            // S·ª≠ d·ª•ng enhanced error handler
            if (result.code) {
              showErrorMessage(result.code, null, result.error);
            } else {
              showErrorMessage('TOOL_ERROR', `Kh√¥ng th·ªÉ m·ªü tool: ${result.error}`);
            }
          } else {
            showMessage(`‚úÖ Tool ${code} ƒëang m·ªü...`, 'success');
          }
        } catch (error) {
          console.error('[OPEN_TOOL] Error:', error);
          showErrorMessage('TOOL_ERROR', `L·ªói khi m·ªü tool ${code}`);
        }
      }
    });
  });
  
  // G√°n s·ª± ki·ªán cho n√∫t MUA (cho t·∫•t c·∫£ tools)
  document.querySelectorAll('.btn-buy').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const code = e.target.getAttribute('data-code');
      const tool = toolsData.find(t => t.code === code);
      if (tool) {
        showToolPackages(code, tool.name);
      }
    });
  });
}


// H√†m hi·ªÉn th·ªã token d·∫°ng ·∫©n v√† th√™m n√∫t copy
function renderTokenMasked(token) {
  try {
    if (!token || typeof token !== 'string' || !tokenSpan) return;
    // T√≠nh s·ªë k√Ω t·ª± hi·ªÉn th·ªã (40%)
    const showLen = Math.ceil(token.length * 0.4);
    const masked = token.slice(0, showLen) + '...';
    tokenSpan.innerHTML = `<span id="maskedToken" style="font-weight:bold;background:#f1f2f6;padding:4px 8px;border-radius:6px;letter-spacing:1px;color:#3742fa;user-select:text;">${masked}</span> <button id="copyTokenBtn" style="margin-left:8px;padding:2px 8px;font-size:12px;cursor:pointer;">Copy token</button>`;
    const btn = document.getElementById('copyTokenBtn');
    btn.onclick = function() {
      try {
        const maskedEl = document.getElementById('maskedToken');
        if (!maskedEl) return;
        maskedEl.textContent = token;
        // Copy to clipboard, fallback n·∫øu b·ªã t·ª´ ch·ªëi quy·ªÅn
        function fallbackCopy(text) {
          const input = document.createElement('input');
          input.value = text;
          document.body.appendChild(input);
          input.select();
          try {
            document.execCommand('copy');
            btn.textContent = 'ƒê√£ copy!';
          } catch (e) {
            btn.textContent = 'Copy l·ªói!';
          }
          document.body.removeChild(input);
          setTimeout(() => { btn.textContent = 'Copy token'; maskedEl.textContent = masked; }, 1200);
        }
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(token).then(() => {
            btn.textContent = 'ƒê√£ copy!';
            setTimeout(() => { btn.textContent = 'Copy token'; maskedEl.textContent = masked; }, 1200);
          }).catch(() => {
            fallbackCopy(token);
          });
        } else {
          fallbackCopy(token);
        }
      } catch (err) {
        // fallback n·∫øu c√≥ l·ªói b·∫•t k·ª≥
        const maskedEl = document.getElementById('maskedToken');
        if (maskedEl) {
          function fallbackCopy(text) {
            const input = document.createElement('input');
            input.value = text;
            document.body.appendChild(input);
            input.select();
            try {
              document.execCommand('copy');
              btn.textContent = 'ƒê√£ copy!';
            } catch (e) {
              btn.textContent = 'Copy l·ªói!';
            }
            document.body.removeChild(input);
            setTimeout(() => { btn.textContent = 'Copy token'; maskedEl.textContent = masked; }, 1200);
          }
          fallbackCopy(token);
        }
      }
    }
  } catch (err) {
    // Kh√¥ng l√†m crash UI
    return;
  }
}

// Add CSS for connection status and amount buttons
const style = document.createElement('style');
style.textContent = `
.connection-status {
  font-size: 12px;
  text-align: left;
}
.connection-status table {
  width: 100%;
  border-collapse: collapse;
  margin: 10px 0;
}
.connection-status th, .connection-status td {
  border: 1px solid #ddd;
  padding: 4px 8px;
}
.connection-status th {
  background: #f5f5f5;
}
.amount-btn:hover {
  background: #e8f5e8 !important;
  border-color: #27ae60 !important;
  transform: translateY(-1px);
}
.amount-btn:active {
  transform: translateY(0);
}
#paymentInstructions img {
  max-width: 100%;
  height: auto;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* QR Payment Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(102, 126, 234, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(102, 126, 234, 0);
  }
}

@keyframes shimmer {
  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: calc(200px + 100%) 0;
  }
}

#paymentInstructions {
  animation: fadeInUp 0.6s ease-out;
}

#paymentInstructions img {
  animation: pulse 2s infinite;
  transition: transform 0.3s ease;
}

#paymentInstructions img:hover {
  transform: scale(1.05);
}

/* Responsive Design */
@media (max-width: 768px) {
  #paymentInstructions > div > div:nth-child(2) > div {
    flex-direction: column !important;
    gap: 20px !important;
  }
  
  #paymentInstructions > div > div:nth-child(2) > div > div:first-child {
    flex: none !important;
    align-self: center;
  }
  
  #paymentInstructions > div > div:nth-child(2) > div > div:first-child > div img {
    width: 160px !important;
    height: 160px !important;
  }
}

/* Loading shimmer effect */
.shimmer {
  background: linear-gradient(to right, #f6f7f8 0%, #edeef1 20%, #f6f7f8 40%, #f6f7f8 100%);
  background-size: 800px 104px;
  animation: shimmer 1.5s linear infinite;
}

/* Button hover effects */
.payment-button {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.payment-button:before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: left 0.5s;
}

.payment-button:hover:before {
  left: 100%;
}

/* Gradient text effect */
.gradient-text {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Card hover effect */
.payment-card {
  transition: all 0.3s ease;
}

.payment-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 40px rgba(0,0,0,0.15) !important;
}

/* Status indicators */
.status-success {
  animation: bounce 0.6s ease-in-out;
}

@keyframes bounce {
  0%, 60%, 75%, 90%, 100% {
    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
  }
  0% {
    opacity: 0;
    transform: translate3d(0, 3000px, 0);
  }
  60% {
    opacity: 1;
    transform: translate3d(0, -20px, 0);
  }
  75% {
    transform: translate3d(0, -10px, 0);
  }
  90% {
    transform: translate3d(0, -5px, 0);
  }
  100% {
    transform: translate3d(0, 0, 0);
  }
}
`;
document.head.appendChild(style);

// === PAYMENT & TRANSACTION FUNCTIONS ===

// ƒê√≥ng modal n·∫°p ti·ªÅn
function closeRechargeModal() {
  // Clear timer countdown n·∫øu c√≥
  if (window.currentPaymentTimer) {
    clearInterval(window.currentPaymentTimer);
    window.currentPaymentTimer = null;
  }
  
  // ƒê√É X√ìA: Kh√¥ng c√≤n payment check interval n·ªØa
  
  // Reset l·∫°i form v√† hi·ªÉn th·ªã
  const rechargeForm = document.getElementById('rechargeForm');
  const paymentInstructions = document.getElementById('paymentInstructions');
  
  if (rechargeForm) rechargeForm.style.display = 'block';
  if (paymentInstructions) paymentInstructions.style.display = 'none';
  
  document.getElementById('rechargeModal').style.display = 'none';
  document.getElementById('rechargeForm').reset();
  
  // Reset selected amount buttons
  document.querySelectorAll('.amount-btn').forEach(btn => {
    btn.style.background = 'white';
    btn.style.borderColor = '#ddd';
    btn.style.color = 'black';
  });
}

// ƒê√≥ng modal l·ªãch s·ª≠ giao d·ªãch  
function closeTransactionModal() {
  document.getElementById('transactionModal').style.display = 'none';
}

// T·∫°o QR SePay tr·ª±c ti·∫øp b·∫±ng link (kh√¥ng c·∫ßn API)
function showSepayQRDirect(amount, token) {
  const instructionsDiv = document.getElementById('paymentInstructions');
  
  // Th√¥ng tin t√†i kho·∫£n SePay
  const accountNumber = '0986001816';
  const bankCode = 'VPBank'; // VPBank
  const template = 'compact';
  
  // T·∫°o link QR SePay
  const qrUrl = `https://qr.sepay.vn/img?acc=${accountNumber}&bank=${bankCode}&amount=${amount}&des=${encodeURIComponent(paymentCode)}&template=${template}`;  
  const qrContent = `
    <h4>üè¶ Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</h4>
    <div style="text-align: center; margin: 20px 0;">
      <img src="${qrUrl}" alt="QR Code SePay" style="width: 250px; height: 250px; border: 2px solid #27ae60; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
    </div>
    
    <div style="background: #e8f5e8; border: 2px solid #27ae60; border-radius: 8px; padding: 15px; margin: 15px 0;">
      <h5 style="margin-top: 0; color: #1e7e34;">üìã Th√¥ng tin chuy·ªÉn kho·∫£n:</h5>
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
        <div><strong>üè¶ Ng√¢n h√†ng:</strong> Vietcombank</div>
        <div><strong>üí≥ STK:</strong> ${accountNumber}</div>
        <div><strong>üë§ Ch·ªß TK:</strong> Tr·∫ßn Minh C√¥ng</div>
        <div><strong>üí∞ S·ªë ti·ªÅn:</strong> <span style="color: #27ae60; font-weight: bold;">${amount.toLocaleString('vi-VN')}ƒë</span></div>
      </div>
      <div style="margin-top: 10px; padding: 8px; background: #ffffff; border-radius: 4px; border: 1px dashed #27ae60;">
        <strong>üìù N·ªôi dung:</strong> <code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px; color: #e74c3c; font-weight: bold;">${token}</code>
      </div>
    </div>
    
    <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 12px; margin: 15px 0;">
      <strong>ÔøΩ H∆∞·ªõng d·∫´n thanh to√°n:</strong>
      <ol style="margin: 8px 0; padding-left: 20px; font-size: 14px;">
        <li>M·ªü app ng√¢n h√†ng v√† ch·ªçn <strong>"Qu√©t QR"</strong></li>
        <li>Qu√©t m√£ QR ·ªü tr√™n</li>
        <li>Ki·ªÉm tra th√¥ng tin: <strong>s·ªë ti·ªÅn ${amount.toLocaleString('vi-VN')}ƒë</strong></li>
        <li>Ki·ªÉm tra n·ªôi dung: <strong>${token}</strong></li>
        <li>X√°c nh·∫≠n chuy·ªÉn kho·∫£n</li>
      </ol>
    </div>
    
    <div style="background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 6px; padding: 12px; margin: 15px 0;">
      <p style="margin: 0; color: #721c24; text-align: center;"><strong>‚ö†Ô∏è L∆∞U √ù QUAN TR·ªåNG</strong></p>
      <ul style="margin: 8px 0; padding-left: 20px; color: #721c24; font-size: 14px;">
        <li><strong>N·ªôi dung chuy·ªÉn kho·∫£n PH·∫¢I ch√≠nh x√°c l√† token c·ªßa b·∫°n</strong></li>
        <li>Chuy·ªÉn ƒë√∫ng s·ªë ti·ªÅn ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông</li>
        <li>Ti·ªÅn s·∫Ω ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n trong v√≤ng <strong>1-3 ph√∫t</strong></li>
        <li>N·∫øu sau 5 ph√∫t ch∆∞a ƒë∆∞·ª£c c·ªông, vui l√≤ng li√™n h·ªá admin</li>
      </ul>
    </div>
    
    <div style="text-align: center; margin-top: 20px; padding: 16px; background: linear-gradient(135deg, rgba(27, 97, 162, 0.1) 0%, rgba(108, 99, 255, 0.1) 100%); border-radius: 12px; border: 2px solid rgba(27, 97, 162, 0.2);">
      <p style="margin: 0; color: #1B61A2; font-weight: 600; font-size: 14px;">
        ÔøΩ <strong>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·ªông ti·ªÅn khi nh·∫≠n ƒë∆∞·ª£c chuy·ªÉn kho·∫£n!</strong><br>
        <span style="font-size: 13px; opacity: 0.8;">Popup s·∫Ω t·ª± ƒë√≥ng khi thanh to√°n th√†nh c√¥ng ho·∫∑c sau 10 ph√∫t</span>
      </p>
    </div>
  `;
  
  instructionsDiv.innerHTML = qrContent;
  instructionsDiv.style.display = 'block';
  
  // ƒê√É X√ìA: Kh√¥ng c√≤n t·ª± ƒë·ªông ki·ªÉm tra thanh to√°n n·ªØa
}

// Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n t·ª± ƒë·ªông
// ƒê√É X√ìA: Kh√¥ng c√≤n ki·ªÉm tra thanh to√°n t·ª± ƒë·ªông n·ªØa ƒë·ªÉ tr√°nh popup t·ª± ƒë√≥ng

// Ch·ªâ gi·ªØ l·∫°i countdown timer cho QR

// ƒê√É X√ìA: checkPaymentStatusManual - kh√¥ng c√≤n n√∫t ki·ªÉm tra th·ªß c√¥ng

// H√†m t·∫Øt/b·∫≠t ki·ªÉm tra t·ª± ƒë·ªông
// ƒê√É X√ìA: toggleAutoPaymentCheck - kh√¥ng c√≤n auto check n·ªØa


// Load l·ªãch s·ª≠ giao d·ªãch
function loadTransactionHistory() {
  if (!currentToken) return;
  
  socket.emit('get-user-transactions', { token: currentToken }, (response) => {
    if (response.success) {
      renderTransactionHistory(response.transactions);
    } else {
      document.getElementById('transactionList').innerHTML = '<p style="text-align: center; color: #e74c3c;">L·ªói khi t·∫£i l·ªãch s·ª≠ giao d·ªãch: ' + response.error + '</p>';
    }
  });
}

// Render l·ªãch s·ª≠ giao d·ªãch
function renderTransactionHistory(transactions) {
  const transactionList = document.getElementById('transactionList');
  
  if (!transactions || transactions.length === 0) {
    transactionList.innerHTML = '<p style="text-align: center; color: #7f8c8d;">B·∫°n ch∆∞a c√≥ giao d·ªãch n√†o.</p>';
    return;
  }
  
  const tableHtml = `
    <table style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr style="background: #f8f9fa;">
          <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Th·ªùi gian</th>
          <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">H√†nh ƒë·ªông</th>
          <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Tool</th>
          <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">S·ªë ti·ªÅn</th>
          <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Tr·∫°ng th√°i</th>
        </tr>
      </thead>
      <tbody>
        ${transactions.map(tx => `
          <tr style="border-bottom: 1px solid #dee2e6;">
            <td style="padding: 10px;">${new Date(tx.created_at).toLocaleString('vi-VN')}</td>
            <td style="padding: 10px;">
              <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; background: ${tx.action === 'n·∫°p' ? '#e8f5e8' : '#e3f2fd'}; color: ${tx.action === 'n·∫°p' ? '#2d7a2d' : '#1565c0'};">
                ${tx.action === 'n·∫°p' ? 'üí∞ N·∫°p ti·ªÅn' : 'üõí Mua tool'}
              </span>
            </td>
            <td style="padding: 10px;">${tx.tool_name || tx.tool_code || '-'}</td>
            <td style="padding: 10px; font-weight: 600; color: ${tx.action === 'n·∫°p' ? '#27ae60' : '#e74c3c'};">
              ${tx.action === 'n·∫°p' ? '+' : '-'}${Math.abs(tx.amount).toLocaleString('vi-VN').replace(/,/g, '.')} VND
            </td>
            <td style="padding: 10px;">
              <span style="color: ${tx.status === 'th√†nh c√¥ng' ? '#27ae60' : tx.status === 'th·∫•t b·∫°i' ? '#e74c3c' : '#f39c12'}; font-weight: 600;">
                ${getStatusIcon(tx.status)} ${tx.status}
              </span>
            </td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  `;
  
  transactionList.innerHTML = tableHtml;
}

// L·∫•y icon tr·∫°ng th√°i
function getStatusIcon(status) {
  switch(status) {
    case 'th√†nh c√¥ng': return '‚úÖ';
    case 'th·∫•t b·∫°i': return '‚ùå';
    case 'ƒëang x·ª≠ l√Ω': return '‚è≥';
    default: return '‚ùì';
  }
}

// Load s·ªë d∆∞ ng∆∞·ªùi d√πng - Optimized with SocketOptimizer
function loadUserBalance() {
  if (!currentToken) return Promise.resolve();
  
  return new Promise((resolve) => {
    // ƒê·∫∑t timeout ƒë·ªÉ tr√°nh treo v√¥ h·∫°n
    const timeout = setTimeout(() => {
      console.warn('[BALANCE] Timeout loading balance');
      createFloatingMessage('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i s·ªë d∆∞. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.', 'warning', 5000);
      resolve();
    }, 10000); // 10 seconds timeout
    
    // Use optimized emit if available
    if (socketOptimizer) {
      socketOptimizer.trackEmit('get-user-balance', { token: currentToken }, (response) => {
        clearTimeout(timeout);
        handleBalanceResponse(response);
        resolve();
      }, 8000); // 8 second timeout for tracked requests
    } else {
      // Fallback to normal emit
      socket.emit('get-user-balance', { token: currentToken }, (response) => {
        clearTimeout(timeout);
        handleBalanceResponse(response);
        resolve();
      });
    }
  });
}

// Helper function to handle balance response
function handleBalanceResponse(response) {
  if (response && response.success) {
    userBalance = parseInt(response.balance || 0, 10);
    if (userBalanceSpan) {
      userBalanceSpan.textContent = userBalance.toLocaleString('vi-VN') + ' VND';
    }
  } else {
    console.error('[BALANCE] Failed to load balance:', response);
    if (userBalanceSpan) {
      userBalanceSpan.textContent = 'L·ªói t·∫£i s·ªë d∆∞';
    }
    createFloatingMessage('‚ùå Kh√¥ng th·ªÉ t·∫£i s·ªë d∆∞. Vui l√≤ng th·ª≠ l·∫°i.', 'error', 5000);
  }
}

// C·∫≠p nh·∫≠t n√∫t MUA v·ªõi gi√° t·ª´ admin
function updateBuyButtons() {
  // S·∫Ω ƒë∆∞·ª£c g·ªçi sau khi load tool packages t·ª´ server
  socket.emit('get-tool-packages', {}, (response) => {
    if (response.success) {
      const packages = response.packages;
      // C·∫≠p nh·∫≠t UI v·ªõi c√°c g√≥i gi√° m·ªõi
      renderTools(packages);
    }
  });
}

// Socket event listener cho c·∫≠p nh·∫≠t s·ªë d∆∞ realtime
socket.on('balance-updated', (data) => {
  if (data.token === currentToken) {
    userBalance = data.balance;
    if (userBalanceSpan) {
      userBalanceSpan.textContent = userBalance.toLocaleString('vi-VN') + ' VND';
    }
    showMessage('üí∞ S·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'success');
  }
});

// Socket event listener cho th√¥ng b√°o giao d·ªãch
socket.on('transaction-notification', (data) => {
  if (data.token === currentToken) {
    showMessage(data.message, data.status === 'success' ? 'success' : 'error');
    if (data.status === 'success') {
      loadUserBalance(); // Refresh s·ªë d∆∞
      // ƒê√≥ng modal n·∫°p ti·ªÅn n·∫øu ƒëang m·ªü
      const rechargeModal = document.getElementById('rechargeModal');
      if (rechargeModal && rechargeModal.style.display === 'block') {
        closeRechargeModal();
      }
    }
  }
});

// Socket event listener cho webhook SePay - CH·ªà ƒë√≥ng khi c√≥ th√¥ng b√°o th·ª±c s·ª±
socket.on('sepay-payment-success', (data) => {
  if (data.token === currentToken) {
    // Load s·ªë d∆∞ m·ªõi tr∆∞·ªõc
    loadUserBalance().then(() => {
      // L·∫•y s·ªë d∆∞ t·ª´ userBalanceSpan (element ƒë√∫ng)
      const currentBalance = userBalanceSpan?.textContent || 'N/A';
      // T·∫°o th√¥ng b√°o ƒë·∫πp v·ªõi HTML cho SePay
      const successMsg = `
        <div style="text-align: center;">
          <div style="font-size: 24px; margin-bottom: 15px;">üéâTHANH TO√ÅN TH√ÄNH C√îNG!</div>
          <div style="font-size: 18px; margin-bottom: 12px;">
            <strong>C·∫£m ∆°n b·∫°n ƒë√£ n·∫°p ti·ªÅn!</strong>
          </div>
          <div style="font-size: 16px; margin-bottom: 10px;">
            S·ªë ti·ªÅn: <strong style="color: #27ae60; font-size: 18px;">+${data.amount.toLocaleString('vi-VN')}ƒë</strong>
          </div>
          <div style="font-size: 16px;">
            S·ªë d∆∞ hi·ªán t·∫°i: <strong style="color: #2196F3; font-size: 18px;">${currentBalance}</strong>
          </div>
        </div>
      `;
      
      // S·ª≠ d·ª•ng floating message thay v√¨ showMessage
      createFloatingMessage(successMsg, 'success', 10000);
    });
    
    // CH·ªà ƒë√≥ng modal khi c√≥ webhook th√†nh c√¥ng th·ª±c s·ª±
    const rechargeModal = document.getElementById('rechargeModal');
    if (rechargeModal && rechargeModal.style.display === 'block') {
      closeRechargeModal();
    }
  }
});

// Socket event listener cho webhook t·ªïng qu√°t - CH·ªà ƒë√≥ng khi c√≥ th√¥ng b√°o th·ª±c s·ª±
socket.on('payment-success', (data) => {
  if (data.token === currentToken) {
    // Load s·ªë d∆∞ m·ªõi tr∆∞·ªõc
    loadUserBalance().then(() => {
      // L·∫•y s·ªë d∆∞ t·ª´ userBalanceSpan (element ƒë√∫ng)
      const currentBalance = userBalanceSpan?.textContent || 'N/A';
      const paymentMethod = data.payment_method || 'ng√¢n h√†ng';
      

      // T·∫°o th√¥ng b√°o ƒë·∫πp v·ªõi HTML cho payment t·ªïng qu√°t
      const successMsg = `
        <div style="text-align: center;">
          <div style="font-size: 24px; margin-bottom: 15px;">üí≥ THANH TO√ÅN TH√ÄNH C√îNG!</div>
          <div style="font-size: 18px; margin-bottom: 12px;">
            <strong>C·∫£m ∆°n b·∫°n ƒë√£ n·∫°p ti·ªÅn!</strong>
          </div>
          <div style="font-size: 16px; margin-bottom: 10px;">
            S·ªë ti·ªÅn: <strong style="color: #27ae60; font-size: 18px;">+${data.amount.toLocaleString('vi-VN')}ƒë</strong>
          </div>
          <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
            Ph∆∞∆°ng th·ª©c: ${paymentMethod}
          </div>
          <div style="font-size: 16px;">
            S·ªë d∆∞ hi·ªán t·∫°i: <strong style="color: #2196F3; font-size: 18px;">${currentBalance}</strong>
          </div>
        </div>
      `;
      
      // S·ª≠ d·ª•ng floating message thay v√¨ showMessage
      createFloatingMessage(successMsg, 'success', 10000);
    });
    
    // CH·ªà ƒë√≥ng modal khi c√≥ webhook th√†nh c√¥ng th·ª±c s·ª±
    const rechargeModal = document.getElementById('rechargeModal');
    if (rechargeModal && rechargeModal.style.display === 'block') {
      closeRechargeModal();
    }
  }
});

// Hi·ªÉn th·ªã c√°c g√≥i tool ƒë·ªÉ mua
function showToolPackages(toolCode, toolName) {
  if (!currentToken) {
    alert('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!');
    return;
  }
  
  // Load s·ªë d∆∞ hi·ªán t·∫°i
  loadUserBalance();
  
  // L·∫•y danh s√°ch g√≥i cho tool n√†y
  socket.emit('get-tool-packages', { tool_name: toolCode }, (response) => {
    if (response.success && response.packages.length > 0) {
      const packages = response.packages.filter(pkg => pkg.active);
      if (packages.length === 0) {
        alert('Hi·ªán t·∫°i kh√¥ng c√≥ g√≥i n√†o kh·∫£ d·ª•ng cho tool n√†y. Vui l√≤ng li√™n h·ªá admin.');
        return;
      }
      
      showPackageSelectionModal(toolCode, toolName, packages);
    } else {
      alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch g√≥i. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
    }
  });
}

// Hi·ªÉn th·ªã modal ch·ªçn g√≥i
function showPackageSelectionModal(toolCode, toolName, packages) {
  const modalHtml = `
    <div id="packageSelectionModal" style="display: block; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5);">
      <div style="background: white; margin: 8% auto; padding: 25px; width: 500px; border-radius: 12px; position: relative; max-height: 70%; overflow-y: auto;">
        <span id="closePackageModal" style="position: absolute; right: 15px; top: 10px; font-size: 28px; cursor: pointer; color: #aaa;">&times;</span>
        <h3 style="margin-top: 0; color: #2c3e50;">üõí Ch·ªçn g√≥i cho ${toolName}</h3>
        
        <div style="background: #e8f5e8; padding: 10px; border-radius: 6px; margin-bottom: 20px;">
          <span style="color: #2d7a2d; font-weight: 600;">üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${Math.floor(userBalance).toLocaleString('vi-VN')} VND</span>
        </div>
        
        <div id="packageList">
          ${packages.map((pkg, index) => `
            <div class="package-item" style="border: 2px solid #ddd; border-radius: 8px; padding: 15px; margin-bottom: 15px; cursor: pointer; transition: all 0.3s;" onclick="selectPackage(${pkg.id}, ${pkg.price})" onmouseover="this.style.borderColor='#3498db'" onmouseout="this.style.borderColor='#ddd'">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                  <h4 style="margin: 0 0 8px 0; color: #2c3e50;">${pkg.package_name}</h4>
                  <div style="display: flex; gap: 20px; font-size: 14px; color: #7f8c8d;">
                    <span>‚è∞ ${pkg.duration_days} ng√†y</span>
                    <span>‚ö° ${pkg.credit_amount.toLocaleString()} credit</span>
                    ${pkg.rows_amount > 0 ? `<span>üìä ${pkg.rows_amount.toLocaleString()} rows</span>` : ''}
                  </div>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 20px; font-weight: bold; color: #e67e22;">${Math.floor(pkg.price).toLocaleString('vi-VN')} VND</div>
                  <div style="font-size: 12px; color: ${Math.floor(userBalance) >= Math.floor(pkg.price) ? '#27ae60' : '#e74c3c'};">
                    ${Math.floor(userBalance) >= Math.floor(pkg.price) ? '‚úÖ ƒê·ªß s·ªë d∆∞' : '‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞'}
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        
        <div style="text-align: center; margin-top: 20px; color: #7f8c8d;">
          <small>üí° Tip: B·∫°n c√≥ th·ªÉ n·∫°p th√™m ti·ªÅn n·∫øu s·ªë d∆∞ ch∆∞a ƒë·ªß</small>
        </div>
      </div>
    </div>
  `;
  
  // Th√™m modal v√†o DOM
  const modalContainer = document.createElement('div');
  modalContainer.innerHTML = modalHtml;
  document.body.appendChild(modalContainer);
  
  // Event listener ƒë·ªÉ ƒë√≥ng modal
  document.getElementById('closePackageModal').onclick = () => {
    document.body.removeChild(modalContainer);
  };
  
  // ƒê√≥ng modal khi click b√™n ngo√†i
  document.getElementById('packageSelectionModal').onclick = (e) => {
    if (e.target.id === 'packageSelectionModal') {
      document.body.removeChild(modalContainer);
    }
  };
  
  // L∆∞u th√¥ng tin ƒë·ªÉ x·ª≠ l√Ω khi ch·ªçn g√≥i
  window.currentToolPurchase = {
    toolCode: toolCode,
    toolName: toolName,
    modalContainer: modalContainer
  };
}

// X·ª≠ l√Ω khi user ch·ªçn g√≥i
function selectPackage(packageId, price) {
  if (!currentToken || !window.currentToolPurchase) return;
  
  const { toolCode, toolName, modalContainer } = window.currentToolPurchase;
  
  // Ki·ªÉm tra s·ªë d∆∞ (lu√¥n d√πng s·ªë nguy√™n)
  const intBalance = Math.floor(Number(userBalance));
  const intPrice = Math.floor(Number(price));
  if (intBalance < intPrice) {
    if (confirm(`S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß (thi·∫øu ${(intPrice - intBalance).toLocaleString('vi-VN')} VND). B·∫°n c√≥ mu·ªën n·∫°p th√™m ti·ªÅn kh√¥ng?`)) {
      // ƒê√≥ng modal hi·ªán t·∫°i v√† m·ªü modal n·∫°p ti·ªÅn
      document.body.removeChild(modalContainer);
      document.getElementById('rechargeModal').style.display = 'block';
    }
    return;
  }
  
  // X√°c nh·∫≠n mua g√≥i
  if (confirm(`X√°c nh·∫≠n mua g√≥i "${toolName}" v·ªõi gi√° ${intPrice.toLocaleString('vi-VN')} VND?`)) {
    // G·ª≠i request mua g√≥i
    socket.emit('user-buy-tool', {
      token: currentToken,
      tool_name: toolCode,
      package_id: packageId,
      balance: intBalance,
      price: intPrice
    }, (response) => {
      if (response.success) {
        showMessage('‚úÖ Mua g√≥i th√†nh c√¥ng! Tool ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.', 'success');
        
        // C·∫≠p nh·∫≠t s·ªë d∆∞ realtime
        userBalance = response.new_balance;
        if (userBalanceSpan) {
          userBalanceSpan.textContent = userBalance.toLocaleString('vi-VN') + ' VND';
        }
        
        // C·∫≠p nh·∫≠t credit v√† expiry cho tool ngay l·∫≠p t·ª©c
        const toolIndex = toolsData.findIndex(t => t.code === toolCode);
        if (toolIndex !== -1) {
          toolsData[toolIndex].credit = response.credit || 0;
          toolsData[toolIndex].expiry = response.expiry_time; // S·ª≠ d·ª•ng expiry_time t·ª´ server
          toolsData[toolIndex].status = 'active';
          renderTools(); // Re-render ngay ƒë·ªÉ hi·ªán credit m·ªõi v√† ng√†y h·∫øt h·∫°n
        }
        
      } else if (response.need_confirm) {
        // Ahrefs c·∫ßn confirm reset - hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng v·ªÅ RESET ho√†n to√†n
        const confirmMessage = `‚ö†Ô∏è C·∫¢NH B√ÅO AHREFS: B·∫°n c√≤n ${response.remaining_credit} credit ch∆∞a s·ª≠ d·ª•ng.

üîÑ Mua g√≥i m·ªõi s·∫Ω RESET HO√ÄN TO√ÄN (KH√îNG c·ªông d·ªìn):
‚Ä¢ Th·ªùi h·∫°n: RESET t·ª´ h√¥m nay theo s·ªë ng√†y c·ªßa g√≥i m·ªõi
‚Ä¢ Credit: RESET v·ªÅ gi√° tr·ªã g√≥i m·ªõi  
‚Ä¢ Rows: RESET v·ªÅ gi√° tr·ªã g√≥i m·ªõi

‚ùó Th·ªùi h·∫°n c≈© s·∫Ω B·ªä X√ìA, kh√¥ng c·ªông d·ªìn!

‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën RESET ho√†n to√†n v√† mua g√≥i m·ªõi?`;
        
        if (confirm(confirmMessage)) {
          // G·ª≠i l·∫°i v·ªõi confirm_reset = true
          socket.emit('user-buy-tool', {
            token: currentToken,
            tool_name: toolCode,
            package_id: packageId,
            confirm_reset: true
            }, (confirmResponse) => {
              if (confirmResponse.success) {
                showMessage('‚úÖ Mua g√≥i th√†nh c√¥ng! Credit ƒë√£ ƒë∆∞·ª£c reset.', 'success');
                
                // C·∫≠p nh·∫≠t s·ªë d∆∞ realtime
                userBalance = confirmResponse.new_balance;
                if (userBalanceSpan) {
                  userBalanceSpan.textContent = userBalance.toLocaleString('vi-VN') + ' VND';
                }
                
                // C·∫≠p nh·∫≠t credit v√† expiry cho tool ngay l·∫≠p t·ª©c
                const toolIndex = toolsData.findIndex(t => t.code === toolCode);
                if (toolIndex !== -1) {
                  toolsData[toolIndex].credit = confirmResponse.credit || 0;
                  toolsData[toolIndex].expiry = confirmResponse.expiry_time; // S·ª≠ d·ª•ng expiry_time t·ª´ server
                  toolsData[toolIndex].status = 'active';
                  renderTools(); // Re-render ngay ƒë·ªÉ hi·ªán credit m·ªõi v√† ng√†y h·∫øt h·∫°n
                }            } else {
              alert('L·ªói khi mua g√≥i: ' + (confirmResponse.error || 'Unknown error'));
            }
          });
        }
      } else {
        alert('L·ªói khi mua g√≥i: ' + response.error);
      }
      
      // ƒê√≥ng modal
      document.body.removeChild(modalContainer);
    });
  }
}

// ƒê√≥ng modal khi click b√™n ngo√†i
window.onclick = function(event) {
  const rechargeModal = document.getElementById('rechargeModal');
  const transactionModal = document.getElementById('transactionModal');
  
  if (event.target === rechargeModal) {
    closeRechargeModal();
  }
  if (event.target === transactionModal) {
    closeTransactionModal();
  }
}

// H√†m t·∫°o m√£ thanh to√°n ng·∫Øn g·ªçn t·ª´ token
function generatePaymentCode(token) {
  // T·∫°o m√£ thanh to√°n 8-10 k√Ω t·ª± t·ª´ token v√† timestamp
  const timestamp = Date.now().toString();
  const tokenHash = btoa(token).replace(/[^a-zA-Z0-9]/g, '').substring(0, 6);
  const timeHash = timestamp.slice(-4); // 4 s·ªë cu·ªëi c·ªßa timestamp
  const paymentCode = `MT${tokenHash}${timeHash}`.substring(0, 10).toUpperCase();
  
  return paymentCode;
}

// H√†m l√†m s·∫°ch token ƒë·ªÉ tr√°nh l·ªói webhook SePay
function sanitizeTokenForSePay(token) {
  // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c√≥ th·ªÉ g√¢y l·ªói khi qu√©t QR
  // Ch·ªâ gi·ªØ l·∫°i ch·ªØ c√°i, s·ªë v√† m·ªôt s·ªë k√Ω t·ª± an to√†n
  return token.replace(/[^a-zA-Z0-9]/g, '');
}

// T·∫°o QR SePay to√†n m√†n h√¨nh thay th·∫ø form
async function showSepayQRDirectFullScreen(amount, token) {
  const instructionsDiv = document.getElementById('paymentInstructions');
  
  // Th√¥ng tin t√†i kho·∫£n SePay
  const accountNumber = '0986001816';
  const bankCode = 'VPBank'; // VPBank
  const template = 'compact';
  
  // L√†m s·∫°ch token ƒë·ªÉ tr√°nh l·ªói khi qu√©t QR
  const safeToken = sanitizeTokenForSePay(token);
  const hasSpecialChars = token !== safeToken;
  
  // T·∫°o m√£ thanh to√°n ng·∫Øn g·ªçn thay v√¨ d√πng token g·ªëc
  const paymentCode = generatePaymentCode(token);
  const qrUrl = `https://qr.sepay.vn/img?acc=${accountNumber}&bank=${bankCode}&amount=${amount}&des=${encodeURIComponent(paymentCode)}&template=${template}`;
  
  // Hi·ªÉn th·ªã loading state tr∆∞·ªõc
  const loadingContent = `
    <div style="padding: 40px; text-align: center; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
      <div style="background: white; border-radius: 16px; padding: 40px; box-shadow: 0 8px 32px rgba(0,0,0,0.1);">
        <div class="shimmer" style="width: 80px; height: 80px; border-radius: 50%; margin: 0 auto 20px auto; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
          <span style="font-size: 32px; color: white;">‚è≥</span>
        </div>
        <h3 style="margin: 0 0 10px 0; color: #2c3e50;">ƒêang t·∫°o m√£ QR thanh to√°n...</h3>
        <p style="margin: 0; color: #666; font-size: 14px;">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
        <div style="margin-top: 20px; height: 4px; background: #f0f0f0; border-radius: 2px; overflow: hidden;">
          <div style="height: 100%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 2px; animation: shimmer 1.5s linear infinite; width: 60%;"></div>
        </div>
      </div>
    </div>
  `;
  
  instructionsDiv.innerHTML = loadingContent;
  instructionsDiv.style.display = 'block';
  
  // T·∫°o payment code mapping tr√™n server
  try {
    const response = await fetch('https://app.muatool.com/api/create-payment-code', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        paymentCode: paymentCode,
        token: token
      })
    });
    
    if (!response.ok) {
      console.error('Failed to create payment code mapping');
      createFloatingMessage('‚ùå L·ªói t·∫°o m√£ thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.', 'error', 5000);
      return;
    }
    
    const mappingResult = await response.json();
    
  } catch (error) {
    console.error('Error creating payment code mapping:', error);
    
    // Ki·ªÉm tra lo·∫°i l·ªói network
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      createFloatingMessage('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c t·∫Øt VPN/Proxy.', 'error', 8000);
    } else {
      createFloatingMessage('‚ùå L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i.', 'error', 5000);
    }
    return;
  }
  // T·∫°o link QR SePay v·ªõi m√£ thanh to√°n ng·∫Øn g·ªçn
  const qrContent = `
  
<!-- Overlay, che to√†n b·ªô m√†n h√¨nh -->
<div style="
  position: fixed;
  top: 0; left: 0; width: 100vw; height: 100vh;
  background: rgba(0,0,0,0.13);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow-y: auto;
">
  <!-- Card/popup ch√≠nh -->
  <div style="
    background: #fff;
    border-radius: 18px;
    max-width: 420px;
    width: 100%;
    margin: 32px 12px;
    box-shadow: 0 8px 40px rgba(102, 126, 234, 0.10);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 0;
    position: relative;
  ">
    <!-- N√∫t X ƒë·ªÉ ƒë√≥ng -->
    <button onclick="closeRechargeModal()" style="
      position: absolute;
      top: 12px;
      right: 15px;
      background: rgba(255,255,255,0.9);
      border: none;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      font-size: 18px;
      font-weight: bold;
      color: #666;
      cursor: pointer;
      z-index: 10000;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    " onmouseover="this.style.background='rgba(231,76,60,0.1)'; this.style.color='#e74c3c'" onmouseout="this.style.background='rgba(255,255,255,0.9)'; this.style.color='#666'">
      √ó
    </button>
    <!-- Header -->
    <div style="text-align: center; margin-bottom: 0;">
      <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 18px 0 13px 0;
        border-radius: 18px 18px 0 0;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.14);
      ">
        <h2 style="margin: 0; font-size: 20px; font-weight: 600; letter-spacing: 0.5px;">
          üè¶ Thanh to√°n qua SePay
        </h2>
        <p style="margin: 5px 0 0 0; opacity: 0.93; font-size: 14px; font-weight: 400;">
          Qu√©t m√£ QR ƒë·ªÉ thanh to√°n nhanh ch√≥ng
        </p>
      </div>
    </div>
    <!-- Main Content Card -->
    <div style="
      padding: 32px 24px 20px 24px;
      background: white;
      border-radius: 0 0 18px 18px;
      text-align: center;
      display: flex;
      flex-direction: column;
      gap: 16px;
    ">
      <!-- Payment Amount Banner -->
      <div style="
        font-size: 34px;
        font-weight: 700;
        background: linear-gradient(90deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        color: transparent;
        letter-spacing: 1px;
        margin-bottom: 4px;
      ">
        ${amount.toLocaleString('vi-VN')}ƒë
      </div>
      <div style="font-size: 15px; opacity: 0.88;">S·ªë ti·ªÅn c·∫ßn thanh to√°n</div>
      
      <!-- Th√¥ng tin chuy·ªÉn kho·∫£n chi ti·∫øt -->
      <div style="
        background: #e8f5e8;
        border: 2px solid #27ae60;
        border-radius: 12px;
        padding: 16px;
        margin: 16px 0;
        text-align: left;
      ">
        <h4 style="margin: 0 0 12px 0; color: #1e7e34; text-align: center;">üìã Th√¥ng tin chuy·ªÉn kho·∫£n</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 14px;">
          <div><strong>üè¶ Ng√¢n h√†ng:</strong> VPBank</div>
          <div><strong>üí≥ STK:</strong> ${accountNumber}</div>
          <div style="grid-column: 1 / -1;"><strong>üë§ Ch·ªß TK:</strong> Tr·∫ßn Minh C√¥ng</div>
          <div style="grid-column: 1 / -1;"><strong>üí∞ S·ªë ti·ªÅn:</strong> <span style="color: #27ae60; font-weight: bold;">${amount.toLocaleString('vi-VN')}ƒë</span></div>
        </div>
        <div style="margin-top: 12px; padding: 8px; background: #ffffff; border-radius: 6px; border: 1px dashed #27ae60;">
          <strong>üìù N·ªôi dung CK:</strong> <code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px; color: #e74c3c; font-weight: bold;">${paymentCode}</code>
        </div>
      </div>
      
      <!-- QR and Info Section -->
      <div style="display: flex; justify-content: center;">
        <div style="
          background: #f8f9fb;
          padding: 20px 18px 14px 18px;
          border-radius: 16px;
          border: 2.5px solid #667eea;
          box-shadow: 0 4px 16px rgba(102, 126, 234, 0.09);
          display: flex;
          flex-direction: column;
          align-items: center;
          min-width: 210px;
        ">
          <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 0;
            border-radius: 9px;
            margin-bottom: 14px;
            width: 100%;
            font-size: 15px;
            font-weight: 600;
          ">
            üì± Qu√©t m√£ QR
          </div>
          <img src="${qrUrl}" alt="QR Code SePay" style="
            width: 150px;
            height: 150px;
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.09);
            border: 2px solid #fff;
            background: #fff;
          ">
          <div style="
            margin-top: 13px;
            font-size: 13px;
            color: #5e5e5e;
            font-weight: 500;
            letter-spacing: 0.1px;
          ">
            M·ªü app ng√¢n h√†ng ƒë·ªÉ qu√©t
          </div>
        </div>
      </div>
      
      <!-- Info Message thay v√¨ n√∫t ki·ªÉm tra -->
      <div style="background: linear-gradient(135deg, rgba(27, 97, 162, 0.1) 0%, rgba(108, 99, 255, 0.1) 100%); 
          color: #1B61A2; 
          border: 2px solid rgba(27, 97, 162, 0.2); 
          padding: 16px; 
          border-radius: 12px; 
          text-align: center;
          margin-top: 18px;
          font-weight: 600;
          font-size: 14px;">
        üí° <strong>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·ªông ti·ªÅn khi nh·∫≠n ƒë∆∞·ª£c chuy·ªÉn kho·∫£n!</strong><br>
        <span style="font-size: 13px; opacity: 0.8; font-weight: 500;">Popup s·∫Ω t·ª± ƒë√≥ng khi thanh to√°n th√†nh c√¥ng ho·∫∑c sau 10 ph√∫t</span>
      </div>
      
      <!-- C·∫£nh b√°o quan tr·ªçng -->
      <div style="
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        padding: 12px;
        margin-top: 12px;
        font-size: 13px;
        text-align: left;
      ">
        <p style="margin: 0 0 8px 0; font-weight: 600; color: #856404;">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</p>
        <ul style="margin: 0; padding-left: 18px; color: #856404;">
          <li>N·ªôi dung chuy·ªÉn kho·∫£n PH·∫¢I ƒë√∫ng: <strong>${paymentCode}</strong></li>
          <li>Chuy·ªÉn ƒë√∫ng s·ªë ti·ªÅn ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông</li>
          <li>Ti·ªÅn s·∫Ω ƒë∆∞·ª£c c·ªông trong v√≤ng 1-3 ph√∫t</li>
          <li>QR s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n sau 10 ph√∫t</li>
        </ul>
      </div>
      
      <!-- Countdown Timer -->
      <div id="paymentCountdown" style="
        margin-top: 16px;
        padding: 10px 16px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 25px;
        color: white;
        font-size: 14px;
        font-weight: 600;
        text-align: center;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.25);
      ">
        ‚è∞ Th·ªùi gian c√≤n l·∫°i: <span id="countdownTimer">10:00</span>
      </div>
      
      <!-- Footer -->
      <div style="
        margin-top: 18px;
        color: #666; 
        font-size: 13px;
        background: #fff;
        padding: 12px 8px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.03);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 7px;
      ">
        üîí Giao d·ªãch ƒë∆∞·ª£c b·∫£o m·∫≠t b·ªüi Muatool ‚Ä¢ ‚ö° X·ª≠ l√Ω t·ª± ƒë·ªông 24/7
      </div>
      
      <!-- N√∫t Quay l·∫°i -->
      <div style="text-align: center; margin-top: 16px;">
        <button onclick="backToRechargeForm()" style="
          background: #6c757d;
          color: white;
          border: none;
          padding: 10px 24px;
          border-radius: 6px;
          cursor: pointer;
          font-weight: 500;
          font-size: 14px;
          transition: all 0.2s;
          box-shadow: 0 2px 8px rgba(108, 117, 125, 0.2);
        " onmouseover="this.style.background='#5a6268'" onmouseout="this.style.background='#6c757d'">
          ‚Üê Quay l·∫°i 
        </button>
      </div>
    </div>
  </div>
</div>
  `;
  
  instructionsDiv.innerHTML = qrContent;
  instructionsDiv.style.display = 'block';
  
  // Kh·ªüi t·∫°o ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c 10 ph√∫t
  let countdown = 600; // 10 ph√∫t = 600 gi√¢y
  const countdownElement = document.getElementById('countdownTimer');
  
  function updateCountdown() {
    const minutes = Math.floor(countdown / 60);
    const seconds = countdown % 60;
    
    if (countdownElement) {
      countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      
      // Thay ƒë·ªïi m√†u khi c√≤n √≠t th·ªùi gian
      const paymentCountdownDiv = document.getElementById('paymentCountdown');
      if (paymentCountdownDiv) {
        if (countdown <= 60) {
          // D∆∞·ªõi 1 ph√∫t - m√†u ƒë·ªè
          paymentCountdownDiv.style.background = 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%)';
          paymentCountdownDiv.style.color = 'white';
        } else if (countdown <= 300) {
          // D∆∞·ªõi 5 ph√∫t - m√†u cam
          paymentCountdownDiv.style.background = 'linear-gradient(135deg, #e67e22 0%, #d35400 100%)';
          paymentCountdownDiv.style.color = 'white';
        }
      }
    }
    
    if (countdown <= 0) {
      clearInterval(paymentTimer);
      showMessage('‚è∞ QR thanh to√°n ƒë√£ h·∫øt h·∫°n! Vui l√≤ng t·∫°o m√£ QR m·ªõi.', 'warning');
      closeRechargeModal();
      return;
    }
    
    countdown--;
  }
  
  // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c v√† sau ƒë√≥ m·ªói gi√¢y
  updateCountdown();
  const paymentTimer = setInterval(updateCountdown, 1000);
  
  // L∆∞u timer ƒë·ªÉ c√≥ th·ªÉ clear khi ƒë√≥ng modal
  window.currentPaymentTimer = paymentTimer;
  
  // ƒê√É X√ìA: Kh√¥ng c√≤n t·ª± ƒë·ªông ki·ªÉm tra thanh to√°n n·ªØa
}

// Quay l·∫°i form n·∫°p ti·ªÅn
function backToRechargeForm() {
  // Clear countdown timer n·∫øu c√≥
  if (window.currentPaymentTimer) {
    clearInterval(window.currentPaymentTimer);
    window.currentPaymentTimer = null;
  }
  
  // ƒê√É X√ìA: Kh√¥ng c√≤n payment check interval n·ªØa
  
  // Hi·ªán l·∫°i form v√† ·∫©n QR
  const rechargeForm = document.getElementById('rechargeForm');
  const paymentInstructions = document.getElementById('paymentInstructions');
  
  if (rechargeForm) rechargeForm.style.display = 'block';
  
  if (paymentInstructions) paymentInstructions.style.display = 'none';
  

}

